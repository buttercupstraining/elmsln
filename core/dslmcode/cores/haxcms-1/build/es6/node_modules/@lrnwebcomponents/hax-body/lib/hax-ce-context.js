import{LitElement as t,html as e,css as i}from"../../../lit-element/lit-element.js";import{HAXStore as a}from"./hax-store.js";import"./hax-context-item.js";import"./hax-toolbar.js";import{autorun as o,toJS as s}from"../../../mobx/dist/mobx.esm.js";import{wipeSlot as n}from"../../utils/utils.js";class HaxCeContext extends t{static get styles(){return[i`
        :host {
          display: block;
        }
        hax-context-item {
          margin: 0;
        }
        :host(.hax-context-pin-top) hax-toolbar {
          position: fixed;
          top: 0px;
          flex-direction: column;
        }
        div[slot="primary"] {
          display: inline-flex;
        }
      `]}constructor(){super(),this.haxUIElement=!0,this.onScreen=!1,this.ceButtons=[],this.activeTagName="",this.activeTagIcon="hax:paragraph",this.addEventListener("hax-context-item-selected",this.handleCECustomEvent.bind(this))}updated(t){super.updated&&super.updated(t),t.forEach((t,e)=>{"onScreen"===e&&this.onScreen&&this._resetCEMenu()})}render(){return e`
      <hax-toolbar hide-more>
        <hax-context-item
          mini
          action
          more
          slot="prefix"
          icon="${this.activeTagIcon}"
          label="${this.activeTagName}, click to change"
          ?disabled="${this.disableTransform}"
          event-name="hax-transform-node"
        ></hax-context-item>
        ${this.ceButtons.map(t=>e` <hax-context-item
            mini
            action
            slot="prefix"
            icon="${t.icon}"
            label="${t.label}"
            event-name="hax-ce-custom-button"
            value="${t.callback}"
          ></hax-context-item>`)}
        <div slot="primary">
          <slot></slot>
        </div>
        <hax-context-item
          mini
          action
          slot="primary"
          icon="icons:code"
          label="Modify HTML source"
          ?disabled="${!this.sourceView}"
          event-name="hax-source-view-toggle"
        ></hax-context-item>
      </hax-toolbar>
    `}static get tag(){return"hax-ce-context"}static get properties(){return{disableTransform:{type:Boolean},onScreen:{type:Boolean,attribute:"on-screen",reflect:!0},sourceView:{type:Boolean},activeTagIcon:{type:String},activeTagName:{type:String},ceButtons:{type:Array}}}handleCECustomEvent(t){let e=t.detail;switch(e.eventName){case"hax-ce-custom-button":this.activeNode&&"function"==typeof this.activeNode[e.value]&&this.activeNode[e.value](t)&&a.refreshActiveNodeForm()}}firstUpdated(t){super.firstUpdated&&super.firstUpdated(t),o(()=>{this.activeNode=s(a.activeNode),this.activeNode&&this.activeNode.classList&&this._resetCEMenu()})}_resetCEMenu(){if(this.shadowRoot&&n(this,"*"),this.ceButtons=[],a.activeHaxBody&&null!=this.activeNode){let t=a.haxSchemaFromTag(this.activeNode.tagName);this.sourceView=t.canEditSource,a.isTextElement(this.activeNode)||(this.disableTransform=!a.activeHaxBody.canTansformNode(this.activeNode),a.activeGizmo&&(this.activeTagName=a.activeGizmo.title,this.activeTagIcon=a.activeGizmo.icon))}else this.activeTagName="",this.activeTagIcon="hax:paragraph";a.runHook(this.activeNode,"inlineContextMenu",[this])}}window.customElements.define(HaxCeContext.tag,HaxCeContext);export{HaxCeContext};