import{LitElement as e,html as t,css as o}from"../../../lit-element/lit-element.js";import"../../simple-icon/simple-icon.js";import"../../hax-iconset/lib/simple-hax-iconset.js";import"./hax-context-item-menu.js";import"./hax-context-item.js";import"./hax-context-item-textop.js";import"./hax-toolbar.js";import"../../simple-popover/lib/simple-popover-selection.js";import{SimpleTourFinder as i}from"../../simple-popover/lib/SimpleTourFinder.js";import{HAXStore as a}from"./hax-store.js";import{autorun as n,toJS as s}from"../../../mobx/dist/mobx.esm.js";class HaxTextContext extends(i(e)){static get styles(){return[o`
        :host {
          display: block;
          pointer-events: none;
        }
        :host [hidden] {
          display: none;
        }
        simple-popover-selection {
          display: flex;
        }
        .selected-buttons {
          transition: 0.1s all ease-in-out;
          width: 0;
        }
        :host([has-selected-text]) .selected-buttons {
          width: 100%;
        }
        #toolbar {
          overflow: hidden;
        }
        button {
          color: black;
          -webkit-justify-content: flex-start;
          justify-content: flex-start;
          font-size: 11px;
          line-height: 24px;
          margin: 0;
          padding: 0 4px;
          min-height: 24px;
        }
        button:hover {
          cursor: pointer;
          color: black;
        }
        simple-icon {
          --simple-icon-height: 20px;
          --simple-icon-width: 20px;
          padding: 4px;
        }
        hax-context-item-textop,
        hax-context-item {
          transition: all 0.2s linear;
          visibility: visible;
          opacity: 1;
        }
        hax-context-item-textop[hidden],
        hax-context-item[hidden] {
          visibility: hidden;
          opacity: 0;
        }
        :host(.hax-context-pin-top) hax-toolbar {
          position: fixed;
          top: 0px;
          flex-direction: column;
        }
      `]}constructor(){super(),this.haxUIElement=!0,this.tourName="hax",setTimeout(()=>{this.addEventListener("hax-context-item-selected",this._haxContextOperation.bind(this)),window.addEventListener("hax-context-item-selected",this._haxInMenuContextOperation.bind(this))},0),this.formattingList=[{value:"p",icon:"hax:paragraph",text:"Paragraph"},{value:"ul",icon:"editor:format-list-bulleted",text:"Bulleted list"},{value:"ol",icon:"editor:format-list-numbered",text:"Numbered list"},{value:"h2",icon:"hax:h2",text:"Title"},{value:"h3",icon:"hax:h3",text:"Content heading"},{value:"h4",icon:"hax:h4",text:"Subheading"},{value:"h5",icon:"hax:h5",text:"Deep subheading"},{value:"blockquote",icon:"editor:format-quote",text:"Blockquote"},{value:"code",icon:"icons:code",text:"Code"}],this.realSelectedValue="p",this.formatIcon="hax:format-textblock",this.isSafari=this._isSafari(),n(()=>{this.hasSelectedText=s(a.haxSelectedText).length>0}),n(()=>{s(a.editMode);const e=s(a.activeNode);a.isTextElement(e)&&this.shadowRoot.querySelector('#textformat button[value="'+e.tagName.toLowerCase()+'"]')&&(this.shadowRoot.querySelector("simple-popover-selection").opened&&(this.shadowRoot.querySelector("simple-popover-selection").opened=!1),this.updateTextIconSelection(e.tagName.toLowerCase()))})}render(){return t`
      <hax-toolbar ?hide-more="${!this.hasSelectedText}" id="toolbar">
        <simple-popover-selection
          slot="primary"
          @simple-popover-selection-changed="${this.textFormatChanged}"
          auto
          orientation="tb"
          id="textformat"
        >
          <style slot="style">
            simple-popover-manager button {
              color: black;
              font-size: 10px !important;
              margin: 0;
              padding: 2px;
              min-height: unset;
              width: 100%;
              display: flex;
              justify-content: start;
              align-items: center;
              border: 0;
            }
            simple-popover-manager button simple-icon {
              --simple-icon-height: 18px;
              --simple-icon-width: 18px;
              margin-right: 8px;
            }
          </style>
          <hax-context-item
            action
            mini
            slot="button"
            id="formatsize"
            icon="${this.formatIcon}"
            label="Text format"
            data-simple-tour-stop
            data-stop-title="label"
          >
            <div slot="tour" data-stop-content>
              Change how the text is structured and visualized in the page.
            </div>
          </hax-context-item>
          ${this.formattingList.map(e=>t` <button slot="options" value="${e.value}">
                <simple-icon icon="${e.icon}"></simple-icon>
                ${e.text}
              </button>`)}
        </simple-popover-selection>
        <hax-context-item-textop
          mini
          action
          slot="primary"
          icon="editor:format-list-bulleted"
          event-name="text-tag-ul"
          label="Bulleted list"
          .hidden="${!this._showLists}"
        ></hax-context-item-textop>
        <hax-context-item-textop
          mini
          action
          slot="primary"
          icon="editor:format-list-numbered"
          label="Numbered list"
          event-name="text-tag-ol"
          .hidden="${!this._showLists}"
        ></hax-context-item-textop>
        <hax-context-item-textop
          mini
          action
          slot="primary"
          icon="editor:format-indent-decrease"
          label="Outdent"
          event-name="text-outdent"
          .hidden="${!this._showIndent}"
        ></hax-context-item-textop>
        <hax-context-item-textop
          mini
          action
          slot="primary"
          icon="editor:format-indent-increase"
          label="Indent"
          event-name="text-indent"
          .hidden="${!this._showIndent}"
        ></hax-context-item-textop>
        <hax-context-item-textop
          mini
          action
          slot="primary"
          icon="editor:format-bold"
          label="Bold"
          class="selected-buttons"
          event-name="text-bold"
          ?disabled="${!this.hasSelectedText}"
        ></hax-context-item-textop>
        <hax-context-item-textop
          mini
          action
          slot="primary"
          icon="editor:format-italic"
          label="Italic"
          class="selected-buttons"
          event-name="text-italic"
          ?disabled="${!this.hasSelectedText}"
        ></hax-context-item-textop>
        <hax-context-item-textop
          mini
          action
          slot="primary"
          icon="editor:insert-link"
          label="Link"
          class="selected-buttons"
          event-name="text-link"
          ?disabled="${!this.hasSelectedText}"
        ></hax-context-item-textop>
        <hax-context-item-textop
          mini
          action
          slot="primary"
          icon="mdextra:unlink"
          label="Remove link"
          class="selected-buttons"
          event-name="text-unlink"
          ?disabled="${!this.hasSelectedText}"
        ></hax-context-item-textop>
        <hax-context-item-textop
          mini
          action
          slot="primary"
          icon="editor:format-clear"
          label="Remove format"
          class="selected-buttons"
          event-name="text-remove-format"
          ?disabled="${!this.hasSelectedText}"
        ></hax-context-item-textop>
        <hax-context-item
          mini
          action
          slot="primary"
          icon="hax:add-brick"
          label="Add element to selection"
          class="selected-buttons"
          event-name="insert-inline-gizmo"
          ?hidden="${this.isSafari||!this.hasSelectedText}"
        ></hax-context-item>
        <hax-context-item-textop
          mini
          action
          slot="primary"
          icon="hax:add-brick"
          label="Add element to selection"
          class="selected-buttons"
          event-name="insert-inline-gizmo"
          ?hidden="${!this.isSafari||!this.hasSelectedText}"
        ></hax-context-item-textop>
        <hax-context-item-textop
          action
          menu
          slot="more"
          icon="mdextra:subscript"
          event-name="text-subscript"
          >Subscript</hax-context-item-textop
        >
        <hax-context-item-textop
          action
          menu
          slot="more"
          icon="mdextra:superscript"
          event-name="text-superscript"
          >Superscript</hax-context-item-textop
        >
        <hax-context-item-textop
          action
          menu
          slot="more"
          icon="editor:format-underlined"
          event-name="text-underline"
          >Underline</hax-context-item-textop
        >
        <hax-context-item-textop
          action
          menu
          slot="more"
          icon="editor:format-strikethrough"
          event-name="text-strikethrough"
          >Cross out</hax-context-item-textop
        >
      </hax-toolbar>
    `}static get tag(){return"hax-text-context"}static get properties(){return{_showIndent:{type:Boolean},_showLists:{type:Boolean},realSelectedValue:{type:String},formattingList:{type:Array},hasSelectedText:{type:Boolean,attribute:"has-selected-text",reflect:!0},formatIcon:{type:String,attribute:"format-icon"},isSafari:{type:Boolean,attribute:"is-safari"}}}textFormatChanged(e){this.shadowRoot.querySelector("simple-popover-selection").opened=!1,this.updateTextIconSelection(e.detail.getAttribute("value")),this.dispatchEvent(new CustomEvent("hax-context-item-selected",{bubbles:!0,cancelable:!0,composed:!0,detail:{eventName:"text-tag",value:this.realSelectedValue}}))}updateTextIconSelection(e){this.realSelectedValue=e,this.shadowRoot.querySelector("[data-simple-popover-selection-active]")&&this.shadowRoot.querySelector("[data-simple-popover-selection-active]").removeAttribute("data-simple-popover-selection-active");let t=this.shadowRoot.querySelector('#textformat button[value="'+this.realSelectedValue+'"]');t.setAttribute("data-simple-popover-selection-active",!0),this.formatIcon=t.querySelector("simple-icon").getAttribute("icon")}updated(e){e.forEach((e,t)=>{"realSelectedValue"==t&&(this._showIndent=this._computeShowIndent(this.realSelectedValue),"p"==this.realSelectedValue?this._showLists=!0:this._showLists=!1)})}firstUpdated(e){super.firstUpdated&&super.firstUpdated(e),s(a.activeNode)&&s(a.activeNode).tagName&&this.updateTextIconSelection(s(a.activeNode).tagName.toLowerCase())}_computeShowIndent(e){return!(!a.computePolyfillSafe()||"li"!=e&&"ol"!=e&&"ul"!=e)}_haxInMenuContextOperation(e){let t=!1;switch(e.detail.eventName){case"text-underline":document.execCommand("underline"),t=!0;break;case"text-subscript":document.execCommand("subscript"),t=!0;break;case"text-superscript":document.execCommand("superscript"),t=!0;break;case"text-strikethrough":document.execCommand("strikeThrough"),t=!0}t&&(this.shadowRoot.querySelector("simple-popover-selection").opened&&(this.shadowRoot.querySelector("simple-popover-selection").opened=!1),e.preventDefault(),e.stopPropagation())}_haxContextOperation(e){let t=e.detail,o=a.getSelection(),i=!1;switch(t.eventName){case"insert-inline-gizmo":if(a._tmpSelection&&a.editMode)try{"HAX-BODY"!==a._tmpRange.startContainer.parentNode.parentNode.tagName&&"HAX-BODY"!==a._tmpRange.startContainer.parentNode.parentNode.parentNode.tagName||(a.activePlaceHolder=a._tmpRange)}catch(e){}if(null!=a.activePlaceHolder){let e={text:a.activePlaceHolder.toString()},t="inline",o=a.guessGizmo(t,e);o.length>0&&a.haxAppPicker.presentOptions(o,t,"Transform selected text to..","gizmo")}break;case"text-bold":document.execCommand("bold"),i=!0;break;case"text-italic":document.execCommand("italic"),i=!0;break;case"text-remove-format":document.execCommand("removeFormat"),i=!0;break;case"text-link":var n="";o&&o.focusNode&&o.focusNode.parentNode&&void 0!==o.focusNode.parentNode.href&&(n=o.focusNode.parentNode.href);let e=prompt("Enter a URL:",n);e&&(document.execCommand("createLink",!1,e),o.focusNode.parentNode&&(o.focusNode.parentNode.setAttribute("contenteditable",!0),o.focusNode.parentNode.removeEventListener("click",e=>{e.preventDefault(),e.stopPropagation(),e.stopImmediatePropagation()}),o.focusNode.parentNode.addEventListener("click",e=>{e.preventDefault(),e.stopPropagation(),e.stopImmediatePropagation()})),i=!0);break;case"text-unlink":document.execCommand("unlink"),i=!0;break;case"text-indent":a.activeHaxBody.__indentTrap=!0,document.execCommand("indent"),i=!0;break;case"text-outdent":a.activeHaxBody.__indentTrap=!0,document.execCommand("outdent"),i=!0}i&&(e.preventDefault(),e.stopPropagation())}_isSafari(){let e=navigator.userAgent.toLowerCase();return!(-1==e.indexOf("safari")||e.indexOf("chrome")>-1)}}window.customElements.define(HaxTextContext.tag,HaxTextContext);export{HaxTextContext};