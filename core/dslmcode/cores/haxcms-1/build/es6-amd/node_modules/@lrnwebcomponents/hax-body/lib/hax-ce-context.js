define(["exports", "../../../lit-element/lit-element.js", "./hax-store.js", "./hax-context-item.js", "./hax-toolbar.js", "../../../mobx/dist/mobx.esm.js"], function (_exports, _litElement, _haxStore, _haxContextItem, _haxToolbar, _mobxEsm) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxCeContext = void 0;

  /**
   * `hax-ce-context`
   * `A context menu that provides common custom-element based authoring options.
   * @microcopy - the mental model for this element
   * - context menu - this is a menu of custom-element based buttons and events for use in a larger solution.
   * @element hax-ce-context
   */
  class HaxCeContext extends _litElement.LitElement {
    /**
     * LitElement constructable styles enhancement
     */
    static get styles() {
      return [(0, _litElement.css)`
        :host {
          display: block;
        }
        hax-context-item {
          margin: 0;
        }
        :host(.hax-context-pin-top) hax-toolbar {
          position: fixed;
          top: 0px;
          flex-direction: column;
        }
      `];
    }

    constructor() {
      super();
      this.haxUIElement = true;
      this.activeTagName = "";
      this.activeTagIcon = "hax:paragraph";
    }

    updated(changedProperties) {
      changedProperties.forEach((oldValue, propName) => {
        if (propName === "onScreen" && this.onScreen) {
          this._computeValues();
        }
      });
    }

    render() {
      return (0, _litElement.html)`
      <hax-toolbar hide-more>
        <hax-context-item
          mini
          action
          more
          slot="prefix"
          icon="${this.activeTagIcon}"
          label="${this.activeTagName}, click to change"
          ?disabled="${this.disableTransform}"
          event-name="hax-transform-node"
        ></hax-context-item>
        <slot slot="primary"></slot>
      </hax-toolbar>
    `;
    }

    static get tag() {
      return "hax-ce-context";
    }

    static get properties() {
      return {
        disableTransform: {
          type: Boolean
        },
        onScreen: {
          type: Boolean,
          attribute: "on-screen",
          reflect: true
        },
        activeTagIcon: {
          type: String
        },
        activeTagName: {
          type: String
        }
      };
    }

    firstUpdated() {
      (0, _mobxEsm.autorun)(() => {
        this.activeNode = (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeNode);

        if (this.activeNode && this.activeNode.classList) {
          this._computeValues();
        }
      });
    }
    /**
     * HAX properties changed, update buttons available.
     */


    _computeValues() {
      if (_haxStore.HAXStore.activeHaxBody && this.activeNode != null) {
        if (!_haxStore.HAXStore.isTextElement(this.activeNode)) {
          if (this.activeNode.tagName == "GRID-PLATE") {
            this.disableTransform = true;
            this.activeTagName = "Grid";
            this.activeTagIcon = "hax:3-3-3-3";
          } else {
            // detect if this can be transformed into anything else
            this.disableTransform = !_haxStore.HAXStore.activeHaxBody.canTansformNode(this.activeNode);

            if (_haxStore.HAXStore.activeGizmo) {
              this.activeTagName = _haxStore.HAXStore.activeGizmo.title;
              this.activeTagIcon = _haxStore.HAXStore.activeGizmo.icon;
            }
          }
        }
      } else {
        this.activeTagName = "";
        this.activeTagIcon = "hax:paragraph";
      }
    }

  }

  _exports.HaxCeContext = HaxCeContext;
  window.customElements.define(HaxCeContext.tag, HaxCeContext);
});