define(["exports", "../../lit-element/lit-element.js", "../simple-colors/simple-colors.js", "./lib/simple-icon-lite.js"], function (_exports, _litElement, _simpleColors, _simpleIconLite) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleIcon = void 0;

  /**
   * Copyright 2020 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `simple-icon`
   * `Render an SVG based icon`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @demo demo/index.html
   * @demo demo/button.html Button
   * @demo demo/lite.html Lite
   * @demo demo/button-lite.html Button (Lite)
   * @demo demo/iconset.html Iconset Demo
   * @element simple-icon
   */
  class SimpleIcon extends (0, _simpleIconLite.SimpleIconBehaviors)(_simpleColors.SimpleColors) {
    /**
     * This is a convention, not the standard
     */
    static get tag() {
      return "simple-icon";
    }

    static get styles() {
      return [...super.styles, (0, _litElement.css)`
        feFlood {
          flood-color: var(
            --simple-icon-color,
            var(--simple-colors-default-theme-accent-8, #000000)
          );
        }
        feFlood.contrast-1 {
          flood-color: var(
            --simple-icon-color,
            var(--simple-colors-default-theme-accent-9, #000000)
          );
        }
        feFlood.contrast-2 {
          flood-color: var(
            --simple-icon-color,
            var(--simple-colors-default-theme-accent-10, #000000)
          );
        }
        feFlood.contrast-3 {
          flood-color: var(
            --simple-icon-color,
            var(--simple-colors-default-theme-accent-11, #000000)
          );
        }
        feFlood.contrast-4 {
          flood-color: var(
            --simple-icon-color,
            var(--simple-colors-default-theme-accent-12, #000000)
          );
        }
      `];
    }

    get feFlood() {
      return !this.noColorize ? (0, _litElement.svg)`<feFlood class="contrast-${this.contrast}" result="COLOR" />` : ``;
    } // properties available to the custom element for data binding


    static get properties() {
      return { ...super.properties,
        contrast: {
          type: Number,
          attribute: "contrast",
          reflect: true
        }
      };
    }

    constructor() {
      super();
      this.contrast = 0;
    }

  }

  _exports.SimpleIcon = SimpleIcon;
  customElements.define(SimpleIcon.tag, SimpleIcon);
});