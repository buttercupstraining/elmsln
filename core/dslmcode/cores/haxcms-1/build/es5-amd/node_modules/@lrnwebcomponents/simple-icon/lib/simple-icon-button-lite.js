define(["exports", "../../../lit-element/lit-element.js", "../../simple-colors/simple-colors.js", "./simple-icons.js", "./simple-icon-lite.js"], function (_exports, _litElement, _simpleColors, _simpleIcons, _simpleIconLite) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleIconButtonLite = _exports.SimpleIconButtonBehaviors = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_90a1c490290811ebbe0ae90af5f52b1f() {
    var data = babelHelpers.taggedTemplateLiteral(["\n          :host([hidden]) {\n            display: none;\n          }\n          :host {\n            display: inline-flex;\n            align-items: center;\n            justify-content: center;\n            position: relative;\n            vertical-align: middle;\n            border-radius: var(--simple-icon-button-padding, 0px);\n            border-radius: var(--simple-icon-button-border-radius, 50%);\n            height: calc(\n              var(--simple-icon-height, 24px) - 2 *\n                var(--simple-icon-button-padding, 0px)\n            );\n            width: calc(\n              var(--simple-icon-width, 24px) - 2 *\n                var(--simple-icon-button-padding, 0px)\n            );\n          }\n          button {\n            cursor: pointer;\n            border: 0;\n            border-radius: var(--simple-icon-button-border-radius, 50%);\n            height: var(--simple-icon-height, 24px);\n            width: var(--simple-icon-width, 24px);\n            background-color: transparent;\n            padding: 0px;\n            margin: 0px;\n          }\n          button:focus,\n          button:hover {\n            opacity: var(--simple-icon-button-focus-opacity, 0.8);\n            --simple-icon-color: var(--simple-icon-button-focus-color);\n          }\n\n          simple-icon {\n            height: var(--simple-icon-height, 24px);\n            width: var(--simple-icon-width, 24px);\n          }\n        "]);

    _templateObject2_90a1c490290811ebbe0ae90af5f52b1f = function _templateObject2_90a1c490290811ebbe0ae90af5f52b1f() {
      return data;
    };

    return data;
  }

  function _templateObject_90a1c490290811ebbe0ae90af5f52b1f() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        <button>\n          <simple-icon-lite icon=", "> </simple-icon-lite>\n        </button>\n      "]);

    _templateObject_90a1c490290811ebbe0ae90af5f52b1f = function _templateObject_90a1c490290811ebbe0ae90af5f52b1f() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  var SimpleIconButtonBehaviors = function SimpleIconButtonBehaviors(SuperClass) {
    return /*#__PURE__*/function (_SuperClass) {
      babelHelpers.inherits(_class, _SuperClass);

      var _super = _createSuper(_class);

      function _class() {
        babelHelpers.classCallCheck(this, _class);
        return _super.call(this);
      }

      babelHelpers.createClass(_class, [{
        key: "render",
        // render function
        value: function render() {
          return (0, _litElement.html)(_templateObject_90a1c490290811ebbe0ae90af5f52b1f(), this.icon);
        } // properties available to the custom element for data binding

      }], [{
        key: "styles",
        get: function get() {
          return [babelHelpers.get(babelHelpers.getPrototypeOf(_class), "styles", this) || []].concat([(0, _litElement.css)(_templateObject2_90a1c490290811ebbe0ae90af5f52b1f())]);
        }
      }, {
        key: "properties",
        get: function get() {
          return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this)), {}, {
            icon: {
              type: String,
              reflect: true
            }
          });
        }
      }]);
      return _class;
    }(SuperClass);
  };
  /**
   * `simple-icon`
   * `Render an SVG based icon`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @demo demo/button-lite.html
   * @element simple-icon
   */


  _exports.SimpleIconButtonBehaviors = SimpleIconButtonBehaviors;

  var SimpleIconButtonLite = /*#__PURE__*/function (_SimpleIconButtonBeha) {
    babelHelpers.inherits(SimpleIconButtonLite, _SimpleIconButtonBeha);

    var _super2 = _createSuper(SimpleIconButtonLite);

    babelHelpers.createClass(SimpleIconButtonLite, null, [{
      key: "tag",

      /**
       * This is a convention, not the standard
       */
      get: function get() {
        return "simple-icon-button-lite";
      }
    }]);

    function SimpleIconButtonLite() {
      babelHelpers.classCallCheck(this, SimpleIconButtonLite);
      return _super2.call(this);
    }

    return SimpleIconButtonLite;
  }(SimpleIconButtonBehaviors(_litElement.LitElement));

  _exports.SimpleIconButtonLite = SimpleIconButtonLite;
  customElements.define(SimpleIconButtonLite.tag, SimpleIconButtonLite);
});