define(["exports", "require", "../../simple-popover/lib/SimpleTourFinder.js", "./hax-store.js", "../../../mobx/dist/mobx.esm.js"], function (_exports, _require, _SimpleTourFinder2, _haxStore, _mobxEsm) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxPlateContext = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-plate-context`
   * `A context menu that provides common grid plate based authoring options.`
   * @microcopy - the mental model for this element
   * - context menu - this is a menu of text based buttons and events for use in a larger solution.
   * - grid plate - the container / full HTML tag which can have operations applied to it.
   */
  var HaxPlateContext = /*#__PURE__*/function (_SimpleTourFinder) {
    babelHelpers.inherits(HaxPlateContext, _SimpleTourFinder);

    var _super = _createSuper(HaxPlateContext);

    function HaxPlateContext() {
      var _this;

      var delayRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      babelHelpers.classCallCheck(this, HaxPlateContext);
      _this = _super.call(this);
      _this.haxUIElement = true;
      _this.tourName = "hax"; // set tag for later use

      _this.tag = HaxPlateContext.tag;
      _this.template = document.createElement("template");

      _this.attachShadow({
        mode: "open"
      });

      if (!delayRender) {
        _this.render();
      }

      setTimeout(function () {
        new Promise(function (res, rej) {
          return _require.default(["./hax-context-item-menu.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["./hax-context-item.js"], res, rej);
        });
      }, 0);
      (0, _mobxEsm.autorun)(function () {
        var activeNode = (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeNode);

        if (activeNode && _this.getAttribute("on-screen")) {
          _this.__updatePlatePosition(activeNode);
        }
      });
      return _this;
    }

    babelHelpers.createClass(HaxPlateContext, [{
      key: "__updatePlatePosition",
      value: function __updatePlatePosition(active) {
        var right = this.shadowRoot.querySelector("#right");
        var rightremove = this.shadowRoot.querySelector("#rightremove"); // support for enabling or disabling

        right.disabled = false;
        rightremove.disabled = false;

        if (active && active.tagName == "GRID-PLATE") {
          if (active.layout == "1-1-1-1-1-1") {
            right.disabled = true;
          }
        } else {
          rightremove.disabled = true;
        }
      }
    }, {
      key: "render",
      value: function render() {
        this.shadowRoot.innerHTML = null;
        this.template.innerHTML = this.html;

        if (window.ShadyCSS) {
          window.ShadyCSS.prepareTemplate(this.template, this.tag);
        }

        this.shadowRoot.appendChild(this.template.content.cloneNode(true));
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(HaxPlateContext.prototype), "connectedCallback", this).call(this);
        this.shadowRoot.querySelector("#drag").addEventListener("dragstart", this._dragStart);
        this.shadowRoot.querySelector("#drag").addEventListener("dragend", this._dragEnd);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.shadowRoot.querySelector("#drag").removeEventListener("dragstart", this._dragStart);
        this.shadowRoot.querySelector("#drag").removeEventListener("dragend", this._dragEnd);
        babelHelpers.get(babelHelpers.getPrototypeOf(HaxPlateContext.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * When we end dragging ensure we remove the mover class.
       */

    }, {
      key: "_dragEnd",
      value: function _dragEnd(e) {
        _haxStore.HAXStore._lockContextPosition = false;
      }
      /**
       * Drag start so we know what target to set
       */

    }, {
      key: "_dragStart",
      value: function _dragStart(e) {
        var target = (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeNode);
        _haxStore.HAXStore.__dragTarget = target;
        _haxStore.HAXStore._lockContextPosition = true; // wipe the add context menu for motion

        _haxStore.HAXStore.activeHaxBody.__activeHover = null;

        _haxStore.HAXStore.activeHaxBody._hideContextMenu(_haxStore.HAXStore.activeHaxBody.contextMenus.add);

        if (e.dataTransfer) {
          e.dataTransfer.effectAllowed = "move";
          e.dataTransfer.dropEffect = "move";
          e.dataTransfer.setDragImage(target, -20, -20);
        }

        e.stopPropagation();
        e.stopImmediatePropagation();
      }
    }, {
      key: "html",
      get: function get() {
        return "\n    <style>\n    :host {\n      display: block;\n      margin-top: -2px;\n      background-color:white;\n    }\n    hax-context-item {\n      display: block;\n    }\n    hax-context-item[large] {\n      display: inline-block;\n      margin:0;\n      padding:0;\n    }\n    hax-context-item-menu {\n      --hax-context-item-menu-height: 28px;\n    }\n    .area {\n      display: flex;\n      visibility: visible;\n      opacity: .8;\n      transition: .2s all ease-in-out;\n    }\n    .area:hover {\n      opacity: 1;\n    }\n    button {\n      background-color: var(--hax-contextual-action-color);\n      -webkit-justify-content: flex-start;\n      justify-content: flex-start;\n      height: 24px;\n      padding: 0 4px;\n      min-height: 24px;\n      font-size: 10px;\n      color: white;\n    }\n    #drag hax-context-item:hover,\n    button:hover {\n      cursor: pointer;\n      color: black;\n    }\n    simple-icon {\n      padding: 0 2px;\n      --simple-icon-height: 16px;\n      --simple-icon-width: 16px;\n    }\n    :host(.hax-context-pin-top) .area {\n      position: fixed;\n      top: 28px;\n      margin-left: -2px;\n      flex-direction: column;\n    }\n    </style>\n    <div class=\"area\" id=\"area\">\n      <hax-context-item-menu\n        mini\n        id=\"drag\"\n        action\n        icon=\"hax:arrow-all\"\n        label=\"Drag handle\"\n        draggable=\"true\"\n        selected-value=\"0\"\n        reset-on-select\n        data-simple-tour-stop\n        data-stop-title=\"label\">\n        <hax-context-item\n          action\n          mini\n          dark\n          simple\n          icon=\"hax:keyboard-arrow-up\"\n          label=\"Move up\"\n          event-name=\"hax-plate-up\"\n          direction=\"left\"\n          ></hax-context-item>\n        <hax-context-item\n          action\n          mini\n          dark\n          simple\n          icon=\"hax:keyboard-arrow-down\"\n          label=\"Move down\"\n          event-name=\"hax-plate-down\"\n          direction=\"left\"\n          ></hax-context-item>\n        <div slot=\"tour\" data-stop-content>\n          Click the drag handle once to show a menu to just move\n          up or down one item in the content OR click and drag\n          to place the item exactly where you want it to go.\n        </div>\n      </hax-context-item-menu>\n      <hax-context-item\n        mini\n        action\n        id=\"right\"\n        class=\"paddle\"\n        icon=\"hax:table-column-remove\"\n        label=\"Add column\"\n        event-name=\"hax-plate-create-right\"\n        data-simple-tour-stop\n        data-stop-title=\"label\"\n      >\n      <div slot=\"tour\" data-stop-content>\n      Add a column to split the current column into two pieces. This can be done up to\n      six pieces columns. For differnet layouts see Grid settings panel.\n      </div>\n    </hax-context-item>\n    <hax-context-item\n      mini\n      action\n      class=\"paddle\"\n      icon=\"hax:table-column-plus-after\"\n      label=\"Remove column\"\n      event-name=\"hax-plate-remove-right\"\n      id=\"rightremove\"\n      data-simple-tour-stop\n      data-stop-title=\"label\"\n    >\n    <div slot=\"tour\" data-stop-content>\n      Remove a column from the split column layout. If at two columns and removing it will\n      remove the layout split and make it 100% width.\n    </div>\n    </hax-context-item>\n  <hax-context-item\n    mini\n    action\n    label=\"Duplicate\"\n    icon=\"icons:content-copy\"\n    event-name=\"hax-plate-duplicate\"\n    data-simple-tour-stop\n    data-stop-title=\"label\"\n    >\n    <div slot=\"tour\" data-stop-content>\n      Duplicate the active piece of content and place it below the current item.\n    </div>\n    </hax-context-item>\n  <hax-context-item\n    mini\n    danger\n    action\n    icon=\"delete\"\n    label=\"Remove\"\n    event-name=\"hax-plate-delete\"\n    data-simple-tour-stop\n    data-stop-title=\"label\"\n  >\n  <div slot=\"tour\" data-stop-content>\n      Delete the current item. You can always use the undo arrow to bring this back.\n    </div>\n  </hax-context-item>\n  </div>\n  ";
      }
    }], [{
      key: "tag",
      get: function get() {
        return "hax-plate-context";
      }
    }]);
    return HaxPlateContext;
  }((0, _SimpleTourFinder2.SimpleTourFinder)(HTMLElement));

  _exports.HaxPlateContext = HaxPlateContext;
  window.customElements.define(HaxPlateContext.tag, HaxPlateContext);
});