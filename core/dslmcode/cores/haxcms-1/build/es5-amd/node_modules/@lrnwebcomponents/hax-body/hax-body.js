define(["exports", "require", "../../lit-element/lit-element.js", "../simple-colors/simple-colors.js", "../utils/utils.js", "../undo-manager/undo-manager.js", "./lib/hax-store.js", "../../mobx/dist/mobx.esm.js"], function (_exports, _require, _litElement, _simpleColors, _utils, _undoManager, _haxStore, _mobxEsm) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxBody = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_519624b0293211eb9c5f5d073167f3c3() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"bodycontainer\" class=\"ignore-activation\">\n        <slot id=\"body\"></slot>\n      </div>\n      <hax-text-context\n        id=\"textcontextmenu\"\n        class=\"hax-context-menu ignore-activation\"\n      ></hax-text-context>\n      <hax-ce-context\n        id=\"cecontextmenu\"\n        class=\"hax-context-menu ignore-activation\"\n      ></hax-ce-context>\n      <hax-plate-context\n        id=\"platecontextmenu\"\n        class=\"hax-context-menu ignore-activation\"\n      ></hax-plate-context>\n      <hax-context-item\n        id=\"addincontext\"\n        class=\"hax-context-menu ignore-activation\"\n        icon=\"icons:add-circle\"\n        label=\"Add here\"\n        mini\n        circle\n      >\n      </hax-context-item>\n    "]);

    _templateObject2_519624b0293211eb9c5f5d073167f3c3 = function _templateObject2_519624b0293211eb9c5f5d073167f3c3() {
      return data;
    };

    return data;
  }

  function _templateObject_519624b0293211eb9c5f5d073167f3c3() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host([edit-mode]),\n        :host([edit-mode]) * ::slotted(*) {\n          line-height: 1.8;\n        }\n        :host([edit-mode]) ul,\n        :host([edit-mode]) ol {\n          padding-left: 20px;\n          margin-left: 20px;\n        }\n        :host([edit-mode]) ul {\n          list-style-type: disc;\n        }\n        :host([edit-mode]) li {\n          margin-bottom: 6px;\n        }\n        :host {\n          display: block;\n          position: relative;\n          min-height: 32px;\n          min-width: 32px;\n          outline: none;\n          --hax-contextual-action-text-color: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n          --hax-contextual-action-hover-color: var(\n            --simple-colors-default-theme-grey-8,\n            #009dc7\n          );\n          --hax-contextual-action-color: var(\n            --simple-colors-default-theme-grey-12,\n            #007999\n          );\n          --hax-body-editable-outline: 0px solid\n            var(--simple-colors-default-theme-grey-4, #eeeeee);\n          --hax-body-active-outline-hover: 1px solid\n            var(--simple-colors-default-theme-grey-8, #eeeeee);\n          --hax-body-active-outline: 0px solid\n            var(\n              --hax-contextual-action-hover-color,\n              var(--simple-colors-default-theme-cyan-7, #009dc7)\n            );\n          --hax-body-active-drag-outline: 1px solid\n            var(\n              --hax-contextual-action-hover-color,\n              var(--simple-colors-default-theme-cyan-7, #009dc7)\n            );\n          --hax-body-target-background-color: var(\n            --simple-colors-default-theme-grey-11,\n            #009dc7\n          );\n          --hax-body-possible-target-background-color: inherit;\n        }\n        #addincontext {\n          opacity: 0.5;\n          transition: 0.2s opacity ease-in-out;\n        }\n        #addincontext:hover,\n        #addincontext:active,\n        #addincontext:focus {\n          opacity: 1;\n        }\n        .hax-context-menu {\n          padding: 0;\n          margin-left: -5000px;\n          position: fixed;\n          visibility: hidden;\n          opacity: 0;\n          z-index: 1000;\n          float: left;\n          display: block;\n          pointer-events: none;\n          transition: 0.2s top ease-in-out, 0.2s left ease-in-out;\n        }\n        #textcontextmenu.hax-context-menu {\n          z-index: 1000;\n        }\n        .hax-context-visible {\n          position: absolute;\n          visibility: visible;\n          pointer-events: all;\n          opacity: 1;\n        }\n        .hax-context-menu-active {\n          margin-left: unset;\n        }\n        :host([edit-mode]) #bodycontainer ::slotted(p) {\n          min-height: var(--hax-base-styles-p-min-height, 1rem);\n          font-size: var(--hax-base-styles-p-font-size);\n          line-height: var(--hax-base-styles-p-line-height);\n          letter-spacing: var(--hax-base-styles-p-letter-spacing);\n        }\n        :host([edit-mode]) #bodycontainer ::slotted(a) {\n          color: var(--hax-base-styles-a-color);\n          font-size: var(\n            --hax-base-styles-a-font-size,\n            var(--hax-base-styles-p-font-size)\n          );\n          font-weight: var(--hax-base-styles-a-font-weight);\n        }\n        :host([edit-mode]) #bodycontainer ::slotted(a:visited) {\n          color: var(--hax-base-styles-a-color-visited);\n        }\n        :host([edit-mode]) #bodycontainer ::slotted(a:active),\n        :host([edit-mode]) #bodycontainer ::slotted(a:focus),\n        :host([edit-mode]) #bodycontainer ::slotted(a:hover) {\n          color: var(--hax-base-styles-a-color-active);\n          font-weight: var(--hax-base-styles-a-font-weight-active);\n        }\n        :host([edit-mode]) #bodycontainer ::slotted(ol),\n        :host([edit-mode]) #bodycontainer ::slotted(ul),\n        :host([edit-mode]) #bodycontainer ::slotted(li) {\n          padding-bottom: var(--hax-base-styles-list-padding-bottom);\n          line-height: var(\n            --hax-base-styles-list-line-height,\n            var(--hax-base-styles-p-line-height)\n          );\n          font-size: var(\n            --hax-base-styles-list-font-size,\n            var(--hax-base-styles-p-font-size)\n          );\n        }\n        :host([edit-mode]) #bodycontainer ::slotted(ol > li:last-child),\n        :host([edit-mode]) #bodycontainer ::slotted(ul > li:last-child) {\n          padding-bottom: var(--hax-base-styles-list-last-child-padding-bottom);\n        }\n        :host([edit-mode]) #bodycontainer ::slotted(img[contenteditable]) {\n          max-width: 100%;\n        }\n        :host([edit-mode]) #bodycontainer ::slotted(*[contenteditable]) {\n          outline: none;\n          caret-color: var(--hax-color-text);\n        }\n        :host([edit-mode]) #bodycontainer ::slotted(*.blinkfocus) {\n          outline: 4px solid var(--hax-contextual-action-hover-color);\n        }\n        :host([edit-mode])\n          #bodycontainer\n          ::slotted(*:not(grid-plate)[contenteditable]:hover) {\n          outline: var(--hax-body-active-outline-hover);\n          caret-color: #000000;\n        }\n        :host([edit-mode])\n          #bodycontainer\n          ::slotted(*.hax-active[contenteditable]:hover) {\n          cursor: text !important;\n          outline: var(--hax-body-active-outline-hover);\n        }\n        :host([edit-mode])\n          #bodycontainer\n          ::slotted(*:not(grid-plate)[contenteditable] .hax-active:hover) {\n          cursor: text !important;\n          outline: var(--hax-body-active-outline-hover);\n        }\n        :host([edit-mode])\n          #bodycontainer\n          ::slotted(code.hax-active[contenteditable]) {\n          display: block;\n        }\n        :host([edit-mode])\n          #bodycontainer\n          ::slotted(*.hax-active[contenteditable]) {\n          outline: var(--hax-body-active-outline) !important;\n        }\n        :host([edit-mode]) #bodycontainer ::slotted(hr[contenteditable]) {\n          height: 2px;\n          background-color: #eeeeee;\n          padding-top: 4px;\n          padding-bottom: 4px;\n        }\n        /** Fix to support safari as it defaults to none */\n        :host([edit-mode]) #bodycontainer ::slotted(*[contenteditable]) {\n          -webkit-user-select: text;\n          cursor: pointer;\n        }\n\n        :host([edit-mode])\n          #bodycontainer\n          ::slotted(*[contenteditable]::-moz-selection),\n        :host([edit-mode])\n          #bodycontainer\n          ::slotted(*[contenteditable] *::-moz-selection) {\n          background-color: var(\n            --hax-body-highlight,\n            var(--simple-colors-default-theme-yellow-2, yellow)\n          );\n          color: black;\n        }\n        :host([edit-mode])\n          #bodycontainer\n          ::slotted(*[contenteditable]::selection),\n        :host([edit-mode])\n          #bodycontainer\n          ::slotted(*[contenteditable] *::selection) {\n          background-color: var(\n            --hax-body-highlight,\n            var(--simple-colors-default-theme-yellow-2, yellow)\n          );\n          color: black;\n        }\n        #bodycontainer {\n          -webkit-user-select: text;\n          user-select: text;\n        }\n        :host([edit-mode][hax-ray-mode])\n          #bodycontainer\n          ::slotted(*[contenteditable]):before {\n          content: attr(data-hax-ray) \" \" attr(resource) \" \" attr(typeof) \" \"\n            attr(property) \" \" attr(content);\n          font-size: 12px;\n          line-height: 12px;\n          left: unset;\n          right: unset;\n          top: unset;\n          background-color: var(--simple-colors-default-theme-cyan-7, #3b97e3);\n          color: #ffffff;\n          bottom: unset;\n          width: auto;\n          padding: 6px;\n          z-index: 1;\n          margin: 0;\n          float: right;\n        }\n        .hax-context-menu:not(:defined) {\n          display: none;\n        }\n        /* drag and drop */\n        :host([edit-mode][hax-mover]) #bodycontainer ::slotted(*):before {\n          background-color: var(--hax-body-possible-target-background-color);\n          content: \" \";\n          width: 100%;\n          display: block;\n          position: relative;\n          margin: -12px 0 0 0;\n          z-index: 2;\n          height: 12px;\n          transition: 0.2s all ease-in-out;\n        }\n        :host([edit-mode][hax-mover]) #bodycontainer ::slotted(img) {\n          outline: var(--hax-body-editable-outline);\n        }\n        :host([edit-mode]) #bodycontainer ::slotted(img.hax-hovered),\n        :host([edit-mode]) #bodycontainer ::slotted(*.hax-hovered):before {\n          background-color: var(--hax-body-target-background-color) !important;\n        }\n        :host([edit-mode]) #bodycontainer ::slotted(img.hax-hovered) {\n          border-top: 8px\n            var(\n              --hax-contextual-action-hover-color,\n              var(--simple-colors-default-theme-cyan-7, #009dc7)\n            );\n          margin-top: -8px;\n        }\n\n        @media screen and (min-color-index: 0) and(-webkit-min-device-pixel-ratio:0) {\n          /*\n            Define here the CSS styles applied only to Safari browsers\n            (any version and any device) via https://solvit.io/bcf61b6\n          */\n          :host([edit-mode][hax-mover]) #bodycontainer ::slotted(*) {\n            outline: var(--hax-body-editable-outline);\n            background-color: var(--hax-body-possible-target-background-color);\n          }\n          :host([edit-mode]) #bodycontainer ::slotted(*.hax-hovered) {\n            background-color: var(\n              --hax-body-target-background-color\n            ) !important;\n            outline: var(--hax-body-active-outline);\n          }\n        }\n      "]);

    _templateObject_519624b0293211eb9c5f5d073167f3c3 = function _templateObject_519624b0293211eb9c5f5d073167f3c3() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  // variables required as part of the gravity drag and scroll
  var gravityScrollTimer = null;
  var maxStep = 25;
  var edgeSize = 200;
  /**
   * `hax-body`
   * Manager of the body area that can be modified
   * 
  ### Styling
  `<hax-bodys>` provides following custom properties
  for styling:
  
  Custom property | Description | Default
  ----------------|-------------|--------
  --haxcms-base-styles-body-font-size |   | 16px
  --haxcms-base-styles-body-font-family, 'Noto Serif' |   | serif
  --haxcms-base-styles-body-line-height |   | 1.8
  --haxcms-base-styles-body-letter-spacing |   | .5px
  --hax-ui-headings |   | #d4ff77;
  --hax-color-text | default text color | #000
  --hax-contextual-action-text-color |  | --simple-colors-default-theme-grey-1
  --hax-contextual-action-color |  | --simple-colors-default-theme-cyan-7
  --hax-contextual-action-hover-color |  | 
  --hax-body-target-background-color: --simple-colors-default-theme-cyan-2
  --hax-body-possible-target-background-color: --simple-colors-default-theme-grey-2
  
  ####Outlines
  Custom property | Description | Default
  ----------------|-------------|--------
  --hax-body-editable-outline |   | 1px solid --simple-colors-default-theme-deep-orange
  --hax-body-active-outline-hover: 1px solid --hax-contextual-action-color
  --hax-body-active-outline: 3px solid  --hax-contextual-action-color
  
  ####Headings
  Custom property | Description | Default
  ----------------|-------------|--------
  --hax-base-styles-h1-font-size |   | 2.5em
  --hax-base-styles-h1-line-height |   | 2.5em
  --hax-base-styles-h2-font-size |   | 2em
  --hax-base-styles-h3-font-size |   | 1.75em
  --hax-base-styles-h4-font-size |   | 1.5em
  --hax-base-styles-h5-font-size |   | 1.25em
  --hax-base-styles-h6-font-size |   | 1.25em
  --hax-base-styles-p-min-height |   | 43px
  --hax-base-styles-p-font-size |   | 24px
  --hax-base-styles-p-line-height |   | 1.8
  --hax-base-styles-p-letter-spacing |   | 0.5px
  
  ####Links
  Custom property | Description | Default
  ----------------|-------------|--------
  --hax-base-styles-a-color |  | --simple-colors-default-theme-grey-12
  --hax-base-styles-a-font-size |   | 24px
  --hax-base-styles-a-font-weight |   | normal
  --hax-base-styles-a-color-visited |   | --simple-colors-default-theme-light-blue
  --hax-base-styles-a-color-active |   | --simple-colors-default-theme-light-blue
  --hax-base-styles-a-font-weight-active |   | normal
  
  ####Lists
  Custom property | Description | Default
  ----------------|-------------|--------
  --hax-base-styles-list-padding-bottom |   | 1.5em
  --hax-base-styles-list-line-height |   | 40px
  --hax-base-styles-list-font-size |   | 24px
  --hax-base-styles-list-last-child-padding-bottom |   | 1em
  --hax-base-styles-list-padding-left |   | 20px
  --hax-base-styles-list-margin-left |   | 20px
   * 
   * @microcopy - the mental model for this element
   *  - body is effectively a body of content that can be manipulated in the browser. This is for other HAX elements ultimately to interface with and reside in. It is the controller of input and output for all of HAX as it exists in a document. body is not the <body> tag but we need a similar mental model container for all our other elements.
   *  - text-context - the context menu that shows up when an item is active so it can have text based operations performed to it.
   *  - plate/grid plate - a plate or grid plate is a container that we can operate on in HAX. it can also have layout / "global" type of body operations performed on it such as delete, duplicate and higher level format styling.
   * 
   * @demo demo/index.html
   * @LitElement
   * @element hax-body
   */

  var HaxBody = /*#__PURE__*/function (_UndoManagerBehaviors) {
    babelHelpers.inherits(HaxBody, _UndoManagerBehaviors);

    var _super = _createSuper(HaxBody);

    babelHelpers.createClass(HaxBody, null, [{
      key: "tag",
      get: function get() {
        return "hax-body";
      }
      /**
       * LitElement constructable styles enhancement
       */

    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(HaxBody), "styles", this)), [(0, _litElement.css)(_templateObject_519624b0293211eb9c5f5d073167f3c3())]);
      }
      /**
       * HTMLElement
       */

    }]);

    function HaxBody() {
      var _this;

      babelHelpers.classCallCheck(this, HaxBody);
      _this = _super.call(this); // lock to ensure we don't flood events on hitting the up / down arrows
      // as we use a mutation observer to manage draggable bindings

      _this.__ignoreActive = false;
      _this.__dragMoving = false;
      _this.___moveLock = false;
      _this.editMode = false;
      _this.haxMover = false;
      _this.globalPreferences = {}; // xray goggles for tags visualized in context, developer thing

      _this.haxRayMode = false;
      _this.activeNode = null;
      setTimeout(function () {
        new Promise(function (res, rej) {
          return _require.default(["./lib/hax-text-context.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["./lib/hax-ce-context.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["./lib/hax-plate-context.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../grid-plate/grid-plate.js"], res, rej);
        });
        _this.polyfillSafe = _haxStore.HAXStore.computePolyfillSafe();

        _this.addEventListener("place-holder-replace", _this.replacePlaceholder.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("focusin", _this._focusIn.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("mousemove", _this._mouseMove.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("mouseleave", _this._mouseLeave.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("touchstart", _this._mouseMove.bind(babelHelpers.assertThisInitialized(_this)), {
          passive: true
        });

        _this.addEventListener("mousedown", _this._mouseDown.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("mouseup", _this._mouseUp.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("dragenter", _this.dragEnterBody.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("dragend", _this.dragEndBody.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("drop", _this.dropEvent.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("click", _this.clickEvent.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);
      (0, _mobxEsm.autorun)(function () {
        _this.globalPreferences = (0, _mobxEsm.toJS)(_haxStore.HAXStore.globalPreferences);
      });
      (0, _mobxEsm.autorun)(function () {
        _this.editMode = (0, _mobxEsm.toJS)(_haxStore.HAXStore.editMode);
      });
      (0, _mobxEsm.autorun)(function () {
        _this.activeNode = (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeNode);
      });
      return _this;
    }
    /**
     * When we end dragging ensure we remove the mover class.
     */


    babelHelpers.createClass(HaxBody, [{
      key: "dragEndBody",
      value: function dragEndBody(e) {
        this.__manageFakeEndCap(false);

        _haxStore.HAXStore._lockContextPosition = false;
        this.querySelectorAll(".hax-hovered").forEach(function (el) {
          el.classList.remove("hax-hovered");
        });
      }
    }, {
      key: "_mouseLeave",
      value: function _mouseLeave(e) {
        if (this.editMode && _haxStore.HAXStore.ready) {
          clearTimeout(this.__mouseQuickTimer);
          clearTimeout(this.__mouseTimer);
          this.__activeHover = null;

          this._hideContextMenu(this.contextMenus.add);
        }
      }
    }, {
      key: "_mouseMove",
      value: function _mouseMove(e) {
        var _this2 = this;

        if (this.editMode && _haxStore.HAXStore.ready) {
          clearTimeout(this.__mouseQuickTimer);
          this.__mouseQuickTimer = setTimeout(function () {
            if (_this2.__activeHover && _this2.__activeHover != e.path[0].closest("[data-hax-ray]:not(li)") && !e.path[0].closest("#addincontext")) {
              var keep;

              for (var i = 0; i < e.path.length; i++) {
                if (e.path[i].getAttribute && e.path[i].getAttribute("id") == "addincontext") {
                  keep = true;
                }
              }

              if (!keep) {
                _this2.__activeHover = null;

                _this2._hideContextMenu(_this2.contextMenus.add);
              }
            }
          }, 300);
          clearTimeout(this.__mouseTimer);
          this.__mouseTimer = setTimeout(function () {
            _this2.__addActiveVisible();

            var target = e.path[0].closest("[data-hax-ray]:not(li)");

            if (target) {
              _this2.__activeHover = target;

              var activeRect = _this2.__activeHover.getBoundingClientRect();

              var addRect = _this2.contextMenus.add.getBoundingClientRect(); // calculate mouse position relative to the element on page
              // and position the add above or below as a result
              // this is bonkers :)


              var distance = (e.pageY - (activeRect.top + window.scrollY)) / activeRect.height;
              var height = -addRect.height - 1; // incentivize above

              if (distance > 0.3) {
                height = activeRect.height + 1;
                _this2.__addAbove = false;
              } else {
                _this2.__addAbove = true;
              } // wow, we have an in context addition menu just like that


              _this2._positionContextMenu(_this2.contextMenus.add, _this2.__activeHover, activeRect.width / 2 - addRect.width / 2, height);
            } else if (e.path[0].closest(".column") && e.path[3] && e.path[3].closest("grid-plate")) {
              var _addRect = _this2.contextMenus.add.getBoundingClientRect();

              var _height = -_addRect.height - 1;

              var _activeRect, posMenuEl; // weird but we need the structure of grid plate here unfortunately
              // if it has nodes in the column we are active on then we need
              // to defer to the grid level because you could always force a node


              if (!e.path[0].closest(".column:not(.has-nodes")) {
                // way out of a column to the host of the template
                _this2.__activeHover = e.path[0].closest(".column").parentNode.parentNode.host;
                posMenuEl = _this2.__activeHover;
                _activeRect = _this2.__activeHover.getBoundingClientRect();

                var _distance = (e.pageY - (_activeRect.top + window.scrollY)) / _activeRect.height;

                if (_distance > 0.3) {
                  _height = _activeRect.height + 1;
                  _this2.__addAbove = false;
                } else {
                  _this2.__addAbove = true;
                }
              } else {
                // to avoid a later loop, we force this to "false"
                _this2.__addAbove = false; // this is a grid column so get it's ID to understand it's slot
                // this leverages our internal __slot hack that gets picked up
                // by our MO in order to automatically set __slot on a node anywhere
                // it's inserted in the body area leveraging alternative logic to
                // figure out which it should place where

                _this2.__slot = e.path[0].closest(".column").getAttribute("id").replace("col", "col-"); // based on what we learned we don't have nodes in the path column
                // but we KNOW there MUST be an element somewhere in this

                if (e.path[0].closest(".column").parentNode.parentNode.host.children.length == 0) {
                  var p = document.createElement("p");
                  p.innerHTML = "<br />";
                  e.path[0].closest(".column").parentNode.parentNode.host.appendChild(p);
                }

                _this2.__activeHover = e.path[0].closest(".column").parentNode.parentNode.host.children[0]; // we focus on the column unlike anything else

                _activeRect = e.path[0].closest(".column").getBoundingClientRect(); // right in the middle of the column

                _height = _activeRect.height / 2 - _addRect.height / 2;
                posMenuEl = e.path[0].closest(".column");
              } // wow, we have an in context addition menu just like that


              _this2._positionContextMenu(_this2.contextMenus.add, posMenuEl, _activeRect.width / 2 - _addRect.width / 2, _height);
            } else if (e.path[0].closest("#bodycontainer")) {
              _this2.__activeHover = null;

              _this2._hideContextMenu(_this2.contextMenus.add);
            }
          }, 600);
        }
      }
    }, {
      key: "_mouseDown",
      value: function _mouseDown(e) {
        this.__mouseDown = true;
        var target = e.target; // resolve to the closest ediable element if possible
        // otherwise keep the target we had
        // @todo need to test more situations for this..

        if (target.closest("[draggable]")) {
          target = target.closest("[draggable]");
        } else if (target.closest("[slot]")) {
          target = target.closest("[slot]");
        } else if (target.closest("[data-hax-ray]")) {
          target = target.closest("[data-hax-ray]");
        } else if (target.closest("[contenteditable]")) {
          target = target.closest("[contenteditable]");
        }

        if (this.__focusLogic(target)) {
          e.stopPropagation();
          e.stopImmediatePropagation();
        }
      }
      /**
       * On mouse release, dump any scroller and the end cap element
       */

    }, {
      key: "_mouseUp",
      value: function _mouseUp(e) {
        var _this3 = this;

        // this helps w/ ensuring that the "focusin" event doesn't
        // fire when a mousedown is executed
        setTimeout(function () {
          _this3.__mouseDown = false;
        }, 0); // failsafe to clear to the gravity scrolling

        clearTimeout(gravityScrollTimer);

        this.__manageFakeEndCap(false);
      }
    }, {
      key: "clickEvent",
      value: function clickEvent(e) {
        // failsafe to clear to the gravity scrolling
        clearTimeout(gravityScrollTimer);
      }
      /**
       * Make a fake end cap element so we can drop in the last position
       * @note This is much easier logic than the alternatives to account for.
       */

    }, {
      key: "__manageFakeEndCap",
      value: function __manageFakeEndCap() {
        var create = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (create && !this.__fakeEndCap) {
          var fake = document.createElement("fake-hax-body-end");
          fake.style.width = "100%";
          fake.style.height = "20px";
          fake.style.zIndex = "2";
          fake.style.display = "block";
          this.__fakeEndCap = fake;
          this.haxMover = true;
          this.appendChild(this.__fakeEndCap);

          this.__applyNodeEditableState(this.__fakeEndCap, true);
        } else if (!create && this.__fakeEndCap) {
          this.__fakeEndCap.remove();

          this.haxMover = false;
          this.__fakeEndCap = null;
        }
      }
      /**
       * Activation allowed from outside this grid as far as drop areas
       */

    }, {
      key: "dragEnterBody",
      value: function dragEnterBody(e) {
        // insert a fake child at the end
        this.__manageFakeEndCap(true);
      }
      /**
       * LitElement render
       */

    }, {
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_519624b0293211eb9c5f5d073167f3c3());
      }
      /**
       * LitElement / popular convention
       */

    }, {
      key: "firstUpdated",

      /**
       * LitElement life cycle - ready
       */
      value: function firstUpdated(changedProperties) {
        var _this4 = this;

        this.dispatchEvent(new CustomEvent("hax-register-body", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        })); // try to normalize paragraph insert on enter

        try {
          document.execCommand("enableObjectResizing", false, false);
          document.execCommand("defaultParagraphSeparator", false, "p");
        } catch (e) {
          console.warn(e);
        }

        this.contextMenus = {
          text: this.shadowRoot.querySelector("#textcontextmenu"),
          plate: this.shadowRoot.querySelector("#platecontextmenu"),
          ce: this.shadowRoot.querySelector("#cecontextmenu"),
          add: this.shadowRoot.querySelector("#addincontext")
        }; // wire up our in context add button

        this.contextMenus.add.addEventListener("click", this._addInContextClick.bind(this)); // track and store range on mouse up. this helps w/ Safari focus selection
        // issues as well as any "tap" event from a phone knowing what text
        // WAS selected prior to an operation that might lose focus / selection
        // during the workflow like replacing an element in context / inline

        this.shadowRoot.querySelector("slot").addEventListener("mouseup", function (e) {
          if (_this4.editMode) {
            setTimeout(function () {
              var tmp = _haxStore.HAXStore.getSelection();

              _haxStore.HAXStore._tmpSelection = tmp;
              _haxStore.HAXStore.haxSelectedText = tmp.toString();

              try {
                var range = _haxStore.HAXStore.getRange();

                if (range.cloneRange) {
                  _haxStore.HAXStore._tmpRange = range.cloneRange();
                }
              } catch (e) {
                console.warn(e);
              }
            }, 10);
          }
        }); // in case we miss this on the initial setup. possible in auto opening environments.

        this.editMode = _haxStore.HAXStore.editMode; // ensure this resets every append

        this.__tabTrap = false;
        this.__ready = true;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxBody.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HaxBody.prototype), "firstUpdated", this).call(this, changedProperties);
        }
      }
      /**
       * Handle adding an item in context based on where the context add
       * was set to follow
       */

    }, {
      key: "_addInContextClick",
      value: function _addInContextClick(e) {
        // break mouse trap so we auto focus the insert
        this.__mouseDown = false;
        var tag = "p"; // special case for lists nested in lists to make sure we don't get
        // stuck placing a P into a ul

        if (["ul", "ol"].includes(this.__activeHover.parentNode.tagName.toLowerCase())) {
          this.__activeHover = this.__activeHover.parentNode;
        } // active will be set via this


        this.haxInsert(tag, "", {}, this.__activeHover); // drop active hover to reset state

        this.__activeHover = null;

        this._hideContextMenu(this.contextMenus.add);
      }
      /**
       * LitElement life cycle - properties changed callback
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this5 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "editMode") {
            _this5._editModeChanged(_this5[propName], oldValue);

            if (_this5[propName]) {
              _this5._activeNodeChanged(_this5.activeNode);

              _this5.activeNode.focus();
            }
          }

          if (propName == "globalPreferences") {
            _this5._globalPreferencesUpdated(_this5[propName], oldValue);
          }

          if (propName == "activeNode" && _this5.__ready) {
            _this5._activeNodeChanged(_this5[propName], oldValue);
          }
        });

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxBody.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HaxBody.prototype), "updated", this).call(this, changedProperties);
        }
      }
      /**
       * HTMLElement
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this6 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(HaxBody.prototype), "connectedCallback", this).call(this); // mutation observer that ensures state of hax applied correctly

        this._observer = new MutationObserver(function (mutations) {
          var mutFind = false;

          if (!_this6.__ignoreActive && !_this6.__dragMoving && !_this6.undoStackIgnore && !_this6.__fakeEndCap) {
            mutations.forEach(function (mutation) {
              if (mutation.addedNodes.length > 0) {
                mutation.addedNodes.forEach(function (node) {
                  if (_this6._validElementTest(node)) {
                    // notice the slot being set during an enter event
                    // and ensure we replicate it
                    if (_this6.__slot) {
                      node.setAttribute("slot", _this6.__slot);
                      _this6.__slot = null;
                    } // force images to NOT be draggable as we will manage D&D


                    if (node.tagName == "IMG") {
                      node.setAttribute("draggable", false);
                    } // trap for user hitting the outdent / indent keys or tabbing
                    // browser will try and wrap text in a span when it's added to
                    // the top level of the document (for no reason)


                    if (_this6.__indentTrap) {
                      // span should not be created, we want a paragraph for this
                      if (node.tagName === "SPAN") {
                        if (node.parentNode === _this6) {
                          _this6.haxChangeTagName(node, "p", true);
                        } else if (node.parentNode.tagName === "LI") {
                          node.parentNode.innerHTML = node.textContent;
                        }
                      } // we don't want BR's injected at top of body area
                      else if (node.tagName === "BR") {
                          node.remove();
                        }
                    } // edge case, thing is moved around in the dom so let's do the opposite
                    // this is something that has PART of these applies
                    // let's make sure that we maintain state associated with contenteditable


                    if (_this6.editMode && (node.getAttribute("contenteditable") == "true" || node.getAttribute("contenteditable") === true || node.getAttribute("contenteditable") == "contenteditable")) {
                      _this6.__applyNodeEditableState(node, !_this6.editMode);
                    }

                    _this6.__applyNodeEditableState(node, _this6.editMode);

                    _this6.dispatchEvent(new CustomEvent("hax-body-tag-added", {
                      bubbles: true,
                      cancelable: true,
                      composed: true,
                      detail: {
                        node: node
                      }
                    })); // special support for Header tags showing up w.o. identifiers
                    // this way it's easier to anchor to them in the future


                    if (["H1", "H2", "H3", "H4", "H5", "H6"].includes(node.tagName) && node.getAttribute("id") == null) {
                      node.setAttribute("id", (0, _utils.generateResourceID)("header-"));
                    } // set new nodes to be the active one
                    // only if we didn't just do a grid plate move
                    // if multiple mutations, only accept the 1st one in a group
                    // special trap for BR being added into the page
                    // this avoids empty elements however we don't want it to trigger
                    // active to change


                    if (!_this6.___moveLock && !mutFind) {
                      mutFind = true;
                      _haxStore.HAXStore.activeNode = node;

                      if (node.tagName === "BR") {
                        var tmp = _haxStore.HAXStore.getSelection();

                        _haxStore.HAXStore._tmpSelection = tmp;
                        _haxStore.HAXStore.haxSelectedText = tmp.toString();

                        var rng = _haxStore.HAXStore.getRange();

                        if (rng.collapsed && _this6.activeNode.tagName === "BR" && _this6.activeNode.parentNode === rng.commonAncestorContainer && _this6.activeNode.innerText === "") {
                          _haxStore.HAXStore.activeNode = _this6.activeNode.parentNode;
                        }
                      }
                    } else {
                      _this6.___moveLock = false;
                    }
                  }
                });

                if (_this6.__indentTrap) {
                  setTimeout(function () {
                    _this6.__indentTrap = false;
                  }, 0);
                }
              } // if we dropped nodes via the UI (delete event basically)


              if (mutation.removedNodes.length > 0) {
                // handle removing items... not sure we need to do anything here
                mutation.removedNodes.forEach(function (node) {
                  if (_this6._validElementTest(node) && !node.classList.contains("hax-active")) {
                    _this6.dispatchEvent(new CustomEvent("hax-body-tag-removed", {
                      bubbles: true,
                      cancelable: true,
                      composed: true,
                      detail: {
                        node: node
                      }
                    }));
                  }
                });
              }
            });
          } // our undo/redo history is being applied. Make sure events
          // are bound but that we don't actively track other changes
          // or it'll poisen our undo stack
          else if (_this6.undoStackIgnore) {
              mutations.forEach(function (mutation) {
                if (mutation.addedNodes.length > 0) {
                  mutation.addedNodes.forEach(function (node) {
                    // valid element to apply state to
                    if (_this6._validElementTest(node)) {
                      // make it editable / drag/drop capable
                      setTimeout(function () {
                        _this6.__applyNodeEditableState(node, _this6.editMode);
                      }, 0);
                    }
                  });
                }
              });
            } else if (_this6.__ignoreActive) {
              _this6.__ignoreActive = false;
            }
        });

        this._observer.observe(this, {
          childList: true,
          subtree: true
        });

        window.addEventListener("hax-context-item-selected", this._haxContextOperation.bind(this));
        window.addEventListener("keydown", this._onKeyDown.bind(this));
        window.addEventListener("keypress", this._onKeyPress.bind(this));
        document.body.addEventListener("hax-store-property-updated", this._haxStorePropertyUpdated.bind(this));
        window.addEventListener("scroll", this._keepContextVisible.bind(this), {
          passive: true
        });
        window.addEventListener("resize", this._keepContextVisible.bind(this), {
          passive: true
        });
      }
      /**
       * HTMLElement
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("keydown", this._onKeyDown.bind(this));
        window.removeEventListener("keypress", this._onKeyPress.bind(this));
        document.body.removeEventListener("hax-store-property-updated", this._haxStorePropertyUpdated.bind(this));
        window.removeEventListener("scroll", this._keepContextVisible.bind(this));
        window.removeEventListener("resize", this._keepContextVisible.bind(this));
        window.removeEventListener("hax-context-item-selected", this._haxContextOperation.bind(this));

        this._observer.disconnect();

        babelHelpers.get(babelHelpers.getPrototypeOf(HaxBody.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Keep the context menu visible if needed
       */

    }, {
      key: "_keepContextVisible",
      value: function _keepContextVisible() {
        var _this7 = this;

        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        if (this.editMode) {
          clearTimeout(this.__contextVisibleLock);
          this.__contextVisibleLock = setTimeout(function () {
            // see if the text context menu is visible
            var el = false;

            if (_this7.contextMenus.text.classList.contains("hax-context-visible")) {
              el = _this7.contextMenus.text;
            } else if (_this7.contextMenus.ce.classList.contains("hax-context-visible")) {
              el = _this7.contextMenus.ce;
            } // if we see it, ensure we don't have the pin


            if (el) {
              if (_this7.elementMidViewport()) {
                el.classList.add("hax-context-pin-top");

                _this7.contextMenus.plate.classList.add("hax-context-pin-top");
              } else {
                el.classList.remove("hax-context-pin-top");

                _this7.contextMenus.plate.classList.remove("hax-context-pin-top");
              }

              _this7.positionContextMenus();
            }
          }, 100);
        }
      }
    }, {
      key: "_onKeyDown",
      value: function _onKeyDown(e) {
        var _this8 = this;

        // make sure we don't have an open drawer, and editing, and we are not focused on tray
        if (this.editMode && document.activeElement.tagName !== "HAX-TRAY" && document.activeElement.tagName !== "BODY" && document.activeElement.tagName !== "SIMPLE-MODAL") {
          // if we are NOT editing and delete key is hit, delete the element
          if (!this.getAttribute("contenteditable")) {
            switch (e.key) {
              case "Delete":
                this.haxDeleteNode(this.activeNode);
                break;
            }
          } else {
            this.__dropActiveVisible();

            this.__manageFakeEndCap(false);

            var sel = _haxStore.HAXStore.getSelection();

            if (sel.anchorNode != null) {
              switch (e.key) {
                case "Z":
                case "z":
                  // trab for undo / redo
                  if (e.ctrlKey) {
                    if (e.shiftKey) {
                      this.redo();
                    } else {
                      this.undo();
                    }

                    if (e.detail.keyboardEvent) {
                      e.detail.keyboardEvent.preventDefault();
                      e.detail.keyboardEvent.stopPropagation();
                      e.detail.keyboardEvent.stopImmediatePropagation();
                    }

                    e.preventDefault();
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                  }

                  break;

                case "Tab":
                  if (_haxStore.HAXStore.isTextElement(this.activeNode)) {
                    if (e.detail.keyboardEvent) {
                      e.detail.keyboardEvent.preventDefault();
                      e.detail.keyboardEvent.stopPropagation();
                      e.detail.keyboardEvent.stopImmediatePropagation();
                    }

                    e.preventDefault();
                    e.stopPropagation();
                    e.stopImmediatePropagation();

                    if (e.shiftKey) {
                      this._tabBackKeyPressed();
                    } else {
                      this._tabKeyPressed();
                    }
                  }

                  break;

                case "Enter":
                  this.__slot = this.activeNode.getAttribute("slot");
                  this.setAttribute("contenteditable", true);

                  if (this.activeNode.tagName === "P" && ["1", "#", "`", ">", "-", "!"].includes(this.activeNode.textContent[0])) {
                    // ensure the "whitespace character" has been replaced w/ a normal space
                    var guess = this.activeNode.textContent.replaceAll(/ /g, " "); // ensures that the user has done a matching action and a " " spacebar to ensure they
                    // are ready to commit the action

                    this.keyboardShortCutProcess(guess);
                  }

                  break;

                case "Backspace":
                case "Delete":
                  this.__deleteItKey = true;

                case "ArrowUp":
                case "ArrowDown":
                case "ArrowLeft":
                case "ArrowRight":
                  setTimeout(function () {
                    var tmp = _haxStore.HAXStore.getSelection();

                    _haxStore.HAXStore._tmpSelection = tmp;
                    _haxStore.HAXStore.haxSelectedText = tmp.toString();

                    var rng = _haxStore.HAXStore.getRange();

                    if (rng.commonAncestorContainer && _this8.activeNode !== rng.commonAncestorContainer && typeof rng.commonAncestorContainer.focus === "function") {
                      if (rng.commonAncestorContainer.tagName !== "HAX-BODY") {
                        if (_haxStore.HAXStore.isTextElement(rng.commonAncestorContainer)) {
                          _this8.setAttribute("contenteditable", true);
                        } else {
                          _this8.removeAttribute("contenteditable");
                        }

                        rng.commonAncestorContainer.focus();

                        _this8.__focusLogic(rng.commonAncestorContainer, false);
                      }
                    } // need to check on the parent too if this was a text node
                    else if (rng.commonAncestorContainer && rng.commonAncestorContainer.parentNode && _this8.activeNode !== rng.commonAncestorContainer.parentNode && typeof rng.commonAncestorContainer.parentNode.focus === "function") {
                        if (rng.commonAncestorContainer.parentNode.tagName !== "HAX-BODY") {
                          if (_haxStore.HAXStore.isTextElement(rng.commonAncestorContainer.parentNode)) {
                            _this8.setAttribute("contenteditable", true);
                          } else {
                            _this8.removeAttribute("contenteditable");
                          }

                          rng.commonAncestorContainer.parentNode.focus();

                          _this8.__focusLogic(rng.commonAncestorContainer.parentNode, false);
                        } else {
                          rng.commonAncestorContainer.focus();

                          _this8.__focusLogic(rng.commonAncestorContainer, false);
                        }
                      }
                  }, 0);
                  break;

                default:
                  // we only care about contextual ops in a paragraph
                  // delay a micro-task to ensure activenode's innerText is set
                  setTimeout(function () {
                    if (_this8.activeNode.tagName === "P" && ["1", "#", "`", ">", "-", "!"].includes(_this8.activeNode.textContent[0])) {
                      // ensure the "whitespace character" has been replaced w/ a normal space
                      var _guess = _this8.activeNode.textContent.replaceAll(/ /g, " "); // ensures that the user has done a matching action and a " " spacebar to ensure they
                      // are ready to commit the action


                      if (_guess[_guess.length - 1] === " ") {
                        _this8.keyboardShortCutProcess(_guess);
                      }
                    }
                  }, 0);
                  break;
              }
            }
          }
        }
      }
    }, {
      key: "keyboardShortCutProcess",
      value: function keyboardShortCutProcess(guess) {
        // look for advanced detections for contextual operations
        var map = {
          "#": "h2",
          "##": "h3",
          "###": "h4",
          "####": "h5",
          "#####": "h6",
          "-": "ul",
          "1.": "ol",
          "---": "hr",
          "```": "code",
          ">": "blockquote"
        }; // see if our map matches

        if (map[guess.replace(" ", "")]) {
          var el = document.createElement(map[guess.replace(" ", "")]); // silly thing for contenteditable to show it as full space height

          el.innerHTML = "<br />";

          if (["UL", "OL"].includes(el.tagName)) {
            el.innerHTML = "<li></li>";
          }

          this.haxReplaceNode(this.activeNode, el);

          this.__focusLogic(el); // breaks should jump just PAST the break
          // and add a p since it's a divider really


          if (el.tagName === "HR") {
            // then insert a P which will assume active status
            this.haxInsert("p", "", {});
          }
        } // look for wildcard / web component pro insert mode
        else if (guess[0] === "!") {
            var tag = guess.replace("!", "").replaceAll(/ /g, ""); // see if this exists

            if (_haxStore.HAXStore.elementList[tag]) {
              // generate schema from the tag
              var schema = _haxStore.HAXStore.haxSchemaFromTag(tag);

              var target;

              if (schema.gizmo.tag && schema.demoSchema && schema.demoSchema[0]) {
                target = (0, _utils.haxElementToNode)(schema.demoSchema[0]);
              } else {
                target = document.createElement(tag);
              }

              this.haxReplaceNode(this.activeNode, target);

              this.__focusLogic(target);
            } else {
              // do nothing, we tried to be a pro but failed :(
              _haxStore.HAXStore.toast("".concat(tag, " is not a valid tag"));
            }
          }
      }
    }, {
      key: "_onKeyPress",
      value: function _onKeyPress(e) {
        var _this9 = this;

        clearTimeout(this.__keyPress);
        this.__keyPress = setTimeout(function () {
          if (_this9.editMode && _this9.activeNode && _haxStore.HAXStore.isTextElement(_this9.activeNode)) {
            // If the user has paused for awhile, show the menu
            clearTimeout(_this9.__positionContextTimer);
            _this9.__positionContextTimer = setTimeout(function () {
              // always on active if we were just typing
              _this9.__addActiveVisible();

              _this9.positionContextMenus();
            }, 2500);
          }
        }, 50);
      }
      /**
       * Only true if we are scrolling and part way through an element
       */

    }, {
      key: "elementMidViewport",
      value: function elementMidViewport() {
        var y = this.activeNode.getBoundingClientRect().y;
        return y < 0 && y > -1 * this.activeNode.offsetHeight + 140;
      }
      /**
       * Replace place holder after an event has called for it in the element itself
       */

    }, {
      key: "replacePlaceholder",
      value: function replacePlaceholder(e) {
        // generate a paragraph of text here on click
        if (e.detail === "text") {
          // make sure text just escalates to a paragraph tag
          var p = document.createElement("p");
          p.innerHTML = "<br/>";
          this.haxReplaceNode(this.activeNode, p);

          this.__focusLogic(p);

          if (this.activeNode.parentNode) {
            this.activeNode.parentNode.setAttribute("contenteditable", true);
          }
        } else {
          this.replaceElementWorkflow();
        }
      }
    }, {
      key: "canTansformNode",
      value: function canTansformNode() {
        var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        return this.replaceElementWorkflow(node, true).length > 0 ? true : false;
      }
      /**
       * Whole workflow of replacing something in place contextually.
       * This can fire for things like events needing this workflow to
       * invoke whether it's a "convert" event or a "replace placeholder" event
       */

    }, {
      key: "replaceElementWorkflow",
      value: function replaceElementWorkflow() {
        var activeNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var testOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        // support for tests with things other than activeNode
        if (activeNode == null) {
          activeNode = this.activeNode;
        }

        var element = (0, _utils.nodeToHaxElement)(activeNode, null);
        var type = "*";
        var skipPropMatch = false; // special support for place holder which defines exactly
        // what the user wants this replaced with

        if (element.tag === "place-holder" && babelHelpers.typeof(element.properties["type"]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          type = element.properties["type"];
          skipPropMatch = true;
        }

        var props = {}; // see if we have a gizmo as it's not a requirement to registration
        // as well as having handlers since mapping is not required either

        if (babelHelpers.typeof(_haxStore.HAXStore.elementList[element.tag]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && _haxStore.HAXStore.elementList[element.tag].gizmo !== false && babelHelpers.typeof(_haxStore.HAXStore.elementList[element.tag].gizmo.handles) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && _haxStore.HAXStore.elementList[element.tag].gizmo.handles.length > 0) {
          // get the haxProperties for this item
          var gizmo = _haxStore.HAXStore.elementList[element.tag].gizmo; // walk through each handler

          for (var i = 0; i < gizmo.handles.length; i++) {
            // walk the properties defined as they would be to the
            // left side of the ledger and tell us which property to
            // mesh with. This effectively rehydrates / inverts that
            // relationship where we have an element and want to say
            // "oh ya, but what could have handled this" so that we
            // can use that translation to offer up convertion to a
            // new element. This is insane.
            for (var prop in gizmo.handles[i]) {
              // type is a reserved handler but any other property
              // which we actually have in our element let's go for it
              if (prop !== "type" && babelHelpers.typeof(element.properties[gizmo.handles[i][prop]]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                // The cake is a lie... oh wait... no it's not.
                // This will completely bend your mind when it comes to
                // what HTML is, how it should operate and what universe
                // we can now contort as a result. This effectively allows
                // reverse engineering any element on the page into any
                // other compatible element based on the properties in
                // each element claiming to be compatible.
                props[prop] = element.properties[gizmo.handles[i][prop]];
              }
            }
          }
        }

        var haxElements = _haxStore.HAXStore.guessGizmo(type, props, skipPropMatch); // see if we got anything


        if (haxElements.length > 0) {
          // hand off to hax-app-picker to deal with the rest of this
          var tag = activeNode.tagName.toLowerCase();
          var humanName = tag.replace("-", " ");

          if (babelHelpers.typeof(_haxStore.HAXStore.elementList[tag]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && _haxStore.HAXStore.elementList[tag].gizmo !== false) {
            humanName = _haxStore.HAXStore.elementList[tag].gizmo.title;
          }

          if (!testOnly) {
            _haxStore.HAXStore.activePlaceHolder = this.activeNode;

            _haxStore.HAXStore.haxAppPicker.presentOptions(haxElements, "__convert", "Transform ".concat(humanName, " to.."), "gizmo");
          }
        } else {
          if (!testOnly) {
            _haxStore.HAXStore.toast("Sorry, this can not be transformed!", 5000);
          }
        }

        return haxElements;
      }
      /**
       * Global prefs updated, let's visualize stuff from hax-ray
       */

    }, {
      key: "_globalPreferencesUpdated",
      value: function _globalPreferencesUpdated(newValue, oldValue) {
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && newValue != null) {
          this.haxRayMode = newValue.haxRayMode;
        }
      }
      /**
       * Store updated, sync.
       */

    }, {
      key: "_haxStorePropertyUpdated",
      value: function _haxStorePropertyUpdated(e) {
        if (e.detail && babelHelpers.typeof(e.detail.value) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && e.detail.property) {
          this[e.detail.property] = e.detail.value;
        }
      }
      /**
       * Clear area.
       */

    }, {
      key: "haxClearBody",
      value: function haxClearBody() {
        var confirm = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        var status = true; // only confirm if asked so we can support wipes without it

        if (confirm) {
          status = prompt("Are you sure you want to delete all content?");
        } // ensure they said yes


        if (status) {
          (0, _utils.wipeSlot)(this);
        }
      }
      /**
       * Insert new tag + content into the local DOM as a node.
       */

    }, {
      key: "haxInsert",
      value: function haxInsert(tag, content) {
        var _this10 = this;

        var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var active = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.activeNode;
        // verify this tag is a valid one
        // create a new element fragment w/ content in it
        // if this is a custom-element it won't expand though
        var frag = document.createElement(tag); // set text forcibly
        //frag.innerText = content;
        // now set html forcibly which would overwrite the other one

        frag.innerHTML = content; // clone the fragment which will force an escalation to full node

        var newNode = frag.cloneNode(true); // support for properties if they exist

        for (var property in properties) {
          var attributeName = (0, _utils.camelToDash)(property);

          if (properties.hasOwnProperty(property)) {
            // special supporting for boolean because html is weird :p
            if (properties[property] === true) {
              newNode.setAttribute(attributeName, attributeName);
            } else if (properties[property] === false) {
              newNode.removeAttribute(attributeName);
            } else if (properties[property] != null && properties[property].constructor === Array) {
              if (newNode.properties && newNode.properties[property].readOnly) {} else {
                if (newNode.set) {
                  newNode.set(attributeName, properties[property]);
                } else {
                  newNode[attributeName] = properties[property];
                }
              }
            } else if (properties[property] != null && properties[property].constructor === Object) {
              if (newNode.properties && newNode.properties[property].readOnly) {} else {
                if (newNode.set) {
                  newNode.set(attributeName, properties[property]);
                } else {
                  newNode[attributeName] = properties[property];
                }
              }
            } else {
              newNode.setAttribute(attributeName, properties[property]);
            }
          }
        } // special support for a drag and drop into a place-holder tag
        // as this is a more aggressive operation then the others


        if (_haxStore.HAXStore.activePlaceHolder !== null && babelHelpers.typeof(_haxStore.HAXStore.activePlaceHolder.style) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          // replicate styles so that it doesn't jar the UI
          newNode.style.width = _haxStore.HAXStore.activePlaceHolder.style.width;
          newNode.style.float = _haxStore.HAXStore.activePlaceHolder.style.float;
          newNode.style.margin = _haxStore.HAXStore.activePlaceHolder.style.margin;
          newNode.style.display = _haxStore.HAXStore.activePlaceHolder.style.display;
          this.haxReplaceNode(_haxStore.HAXStore.activePlaceHolder, newNode);
          _haxStore.HAXStore.activePlaceHolder = null;
        } // insert at active insert point if we have one
        else if (active.parentNode != null) {
            // allow for inserting things into things but not grid plate
            if (active.parentNode.tagName === "GRID-PLATE") {
              if (active.getAttribute("slot") != null) {
                newNode.setAttribute("slot", active.getAttribute("slot"));
              } // special in context add for grids


              if (this.__addAbove) {
                active.parentNode.insertBefore(newNode, active);
              } else {
                active.parentNode.insertBefore(newNode, active.nextElementSibling);
              }
            } else {
              if (active.parentNode && active.parentNode.nextElementSibling) {
                active.parentNode.nextElementSibling.parentNode.insertBefore(newNode, active.parentNode.nextElementSibling);
              } else if (active.parentNode && active.nextElementSibling) {
                if (this.__addAbove) {
                  active.parentNode.insertBefore(newNode, active);
                } else {
                  active.parentNode.insertBefore(newNode, active.nextElementSibling);
                } // test for the LAST item in a group, insert at top and it'll flow to the end

              } else if (active.parentNode && active.parentNode.children[active.parentNode.children.length - 1] === active) {
                if (this.__addAbove) {
                  active.parentNode.insertBefore(newNode, active);
                } else {
                  active.parentNode.appendChild(newNode);
                }
              } else if (active.parentNode) {
                active.parentNode.insertBefore(newNode, active);
              } else {
                // something odd happened let's just make sure we insert this safely
                this.appendChild(newNode);
              }
            }
          } else {
            // send this into the root, which should filter it back down into the slot
            this.appendChild(newNode);
          }

        this.contextMenus.text.hasSelectedText = false;
        setTimeout(function () {
          _this10.__focusLogic(newNode); // wait so that the DOM can have the node to then attach to


          _this10.scrollHere(newNode);
        }, 0);
        return newNode;
      }
      /**
       * Return the current hax content area as text that could be
       * inserted into something.
       */

    }, {
      key: "haxToContent",
      value: function haxToContent() {
        this.hideContextMenus();
        var __active = this.activeNode; // null this to drop hax based classes

        _haxStore.HAXStore.activeNode = null;
        var children = this.shadowRoot.querySelector("#body").localName === "slot" ? this.shadowRoot.querySelector("#body").assignedNodes({
          flatten: true
        }) : [];
        var content = "";

        for (var i = 0, len = children.length; i < len; i++) {
          // some mild front-end sanitization
          if (this._validElementTest(children[i])) {
            children[i].removeAttribute("data-hax-ray"); // remove some of the protected classes though they shouldn't leak through

            children[i].classList.remove("hax-hovered");
            children[i].contentEditable = false;
            content += _haxStore.HAXStore.nodeToContent(children[i]);

            if (children[i].tagName.toLowerCase() === "grid-plate") {
              this._applyContentEditable(this.editMode, children[i]);
            }
          } // keep comments with a special case since they need wrapped
          else if (children[i].nodeType === 8) {
              content += "<!-- " + children[i].textContent + " -->";
            } // keep everything NOT an element at this point, this helps
            // preserve whitespace because we're crazy about accuracy
            else if (children[i].nodeType !== 1 && babelHelpers.typeof(children[i].textContent) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && children[i].textContent !== "undefined") {
                content += children[i].textContent;
              }
        } // remove the contenteditable attribute


        content = content.replace(/\scontenteditable=\"false\"/g, "");
        content = content.replace(/\scontenteditable/g, "");
        content = content.replace(/\sdraggable/g, ""); // clean up stray hax-ray leftovers

        content = content.replace(/\sdata-hax-ray=\".*?\"/g, ""); // remove HAX specific classes / scoping classes

        if (this.parentNode.tagName) {
          var parentTag = this.parentNode.tagName.toLowerCase();
          var string = "style-scope " + parentTag + " x-scope";
          var re = new RegExp(string, "g");
          content = content.replace(re, ""); // remove without the deeeper scope as well for primitives

          string = "style-scope " + parentTag;
          re = new RegExp(string, "g");
          content = content.replace(re, ""); // remove the last common one unpacked

          string = "x-scope " + parentTag + "-0";
          re = new RegExp(string, "g");
          content = content.replace(re, ""); // now all tags we have defined as valid

          var tags = _haxStore.HAXStore.validTagList;

          for (var i in tags) {
            string = "style-scope " + tags[i];
            re = new RegExp(string, "g");
            content = content.replace(re, "");
            string = "x-scope " + tags[i] + "-0 ";
            re = new RegExp(string, "g");
            content = content.replace(re, "");
            string = "x-scope " + tags[i] + "-0";
            re = new RegExp(string, "g");
            content = content.replace(re, "");
          }
        } // remove empty class structures


        content = content.replace(/\sclass=\"\"/g, "");
        content = content.replace(/\sclass=\"\s\"/g, ""); // re-apply contenteditable if needed

        this._applyContentEditable(this.editMode);

        _haxStore.HAXStore.activeNode = __active; // oh one last thing. escape all script/style tags

        content = (0, _utils.encapScript)(content);
        return content;
      }
      /**
       * Duplicate node into the local DOM below the current item if we can.
       */

    }, {
      key: "haxDuplicateNode",
      value: function haxDuplicateNode(node) {
        // convert the node to a hax element
        var haxElement = (0, _utils.nodeToHaxElement)(node, null);

        var props = _haxStore.HAXStore.elementList[node.tagName.toLowerCase()]; // support for tag defining which properties NOT to save
        // for simplification, everything is an attribute during this
        // operation


        if (babelHelpers.typeof(props) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(props.saveOptions.unsetAttributes) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          for (var i in props.saveOptions.unsetAttributes) {
            if (haxElement.properties[props.saveOptions.unsetAttributes[i]]) {
              delete haxElement.properties[props.saveOptions.unsetAttributes[i]];
            }
          }
        } // support for deep API call to clean up special elements


        if (babelHelpers.typeof(node.preProcessHaxInsertContent) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          haxElement = node.preProcessHaxInsertContent(haxElement);
        }

        if (haxElement.content == haxElement.properties.innerHTML) {
          delete haxElement.properties.innerHTML;
        } // convert it back to a clone, seems odd I'm sure but this ensures that all props are copied
        // correctly and that we get a brand new object


        var nodeClone = (0, _utils.haxElementToNode)({
          tag: haxElement.tag,
          content: haxElement.content,
          properties: haxElement.properties
        });

        if (nodeClone.tagName.toLowerCase() === "webview" && _haxStore.HAXStore._isSandboxed && babelHelpers.typeof(nodeClone.guestinstance) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          delete nodeClone.guestinstance;
        } // shouldn't be possible but might as well check


        if (node !== null) {
          node.parentNode.insertBefore(nodeClone, node.nextSibling);
        } else {
          node.parentNode.appendChild(nodeClone);
        }

        _haxStore.HAXStore.activeNode = nodeClone;
        return true;
      }
      /**
       * Hide all context menus.
       */

    }, {
      key: "hideContextMenus",
      value: function hideContextMenus() {
        var hidePlate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        // clear the timeouts for anything that could cause these to reapear
        clearTimeout(gravityScrollTimer);
        clearTimeout(this.__keyPress);
        clearTimeout(this.__contextVisibleLock);
        clearTimeout(this.__positionContextTimer); // primary context menus

        this._hideContextMenu(this.contextMenus.text);

        this._hideContextMenu(this.contextMenus.ce);

        this._hideContextMenu(this.contextMenus.add);

        this.__activeHover = null; // secondary menus and clean up areas

        if (hidePlate) {
          this._hideContextMenu(this.contextMenus.plate);
        }
      }
      /**
       * Reposition context menus to match an element.
       */

    }, {
      key: "positionContextMenus",
      value: function positionContextMenus() {
        var _this11 = this;

        var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.activeNode;
        // sanity chekc and ensure we are not told to lock position of all menus
        clearTimeout(this.__positionContextTimer);
        this.__positionContextTimer = setTimeout(function () {
          if (node && node.tagName && !_haxStore.HAXStore._lockContextPosition && _this11.__ready) {
            // menu width starts out w/ the plate context which is a set size
            var menuWidth = 140;
            var tag = node.tagName.toLowerCase();

            if (_haxStore.HAXStore._isSandboxed && tag === "webview") {
              tag = "iframe";
            }

            var props = _haxStore.HAXStore.elementList[tag]; // try and work against anything NOT a P tag

            if (babelHelpers.typeof(props) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && !_haxStore.HAXStore.isTextElement(node)) {
              _this11._hideContextMenu(_this11.contextMenus.text);

              props.element = node;

              _this11._positionContextMenu(_this11.contextMenus.ce, node, 0, -28);

              menuWidth += 28;
            } else {
              _this11._hideContextMenu(_this11.contextMenus.ce);

              _this11._positionContextMenu(_this11.contextMenus.text, node, 0, -28); // text menu can expand based on selection


              var textRect = _this11.contextMenus.text.getBoundingClientRect();

              menuWidth += textRect.width;
            }

            var activeRect = node.getBoundingClientRect(); // hide menu if we have active on a list item
            // special case because it should not be moved anywhere or have these
            // operations shown as it only makes sense as part of something larger
            // ul / ol which I believe is the ONLY tag that works this way

            if (_this11.activeNode.tagName === "LI" || _this11._HTMLInlineTextDecorationTest(_this11.activeNode)) {
              _this11._hideContextMenu(_this11.contextMenus.plate);
            } // need to account for the item being small than the menu
            else if (Math.round(menuWidth) >= Math.round(activeRect.width)) {
                _this11._positionContextMenu(_this11.contextMenus.plate, node, 0, -56);
              } else {
                _this11._positionContextMenu(_this11.contextMenus.plate, node, activeRect.width - _this11.contextMenus.plate.getBoundingClientRect().width + 1, -26);
              } // special case for node not matching container yet it being editable


            if (node && node.tagName !== "HR" && !_haxStore.HAXStore.isTextElement(node)) {
              node.removeAttribute("contenteditable");
            } else if (node) {
              node.setAttribute("contenteditable", true);
            }
          }
        }, 50);
      }
      /**
       * No idea how to describe these name wise but basically we want to only
       * show the menus when we need them. This toggle allows us the ability
       * to hide the context menus while the user is engaged in typing or
       * other actions where the in-context menus are distracting
       */

    }, {
      key: "__addActiveVisible",
      value: function __addActiveVisible() {
        for (var i in this.contextMenus) {
          if (i != "add" || this.__activeHover) {
            this.contextMenus[i].classList.add("hax-context-menu-active");
          }
        }
      }
    }, {
      key: "__dropActiveVisible",
      value: function __dropActiveVisible() {
        for (var i in this.contextMenus) {
          this.contextMenus[i].classList.remove("hax-context-menu-active");
        } // force hiding add menu


        this.__activeHover = null;

        this._hideContextMenu(this.contextMenus.add);
      }
      /**
       * Move grid plate around
       */

    }, {
      key: "haxMoveGridPlate",
      value: function haxMoveGridPlate(direction, node) {
        // menu is actually in the element for render purposes
        // support moving things multiple directions
        this.___moveLock = true;

        switch (direction) {
          case "up":
            // ensure we can go up
            if (node.previousElementSibling !== null) {
              node.parentNode.insertBefore(node, node.previousElementSibling);
            }

            break;

          case "down":
            if (node.nextElementSibling !== null) {
              node.parentNode.insertBefore(node.nextElementSibling, node);
            }

            break;
        }

        this.scrollHere(node);
        this.positionContextMenus(node);
        return true;
      }
      /**
       * Inject / modify a grid plate where something currently lives
       */

    }, {
      key: "haxGridPlateOps",
      value: function () {
        var _haxGridPlateOps = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var add,
              side,
              node,
              changed,
              cloneEl,
              right,
              rightremove,
              grid,
              col,
              tmp,
              _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  add = _args.length > 0 && _args[0] !== undefined ? _args[0] : true;
                  side = _args.length > 1 && _args[1] !== undefined ? _args[1] : "right";
                  node = _args.length > 2 && _args[2] !== undefined ? _args[2] : this.activeNode;
                  // allow splitting the grid plate that is already there
                  changed = false;

                  if (!(node.tagName === "GRID-PLATE")) {
                    _context.next = 50;
                    break;
                  }

                  if (!add) {
                    _context.next = 26;
                    break;
                  }

                  _context.t0 = node.layout;
                  _context.next = _context.t0 === "1" ? 9 : _context.t0 === "1-1" ? 12 : _context.t0 === "1-1-1" ? 15 : _context.t0 === "1-1-1-1" ? 18 : _context.t0 === "1-1-1-1-1" ? 21 : 24;
                  break;

                case 9:
                  node.layout = "1-1";
                  changed = true;
                  return _context.abrupt("break", 24);

                case 12:
                  node.layout = "1-1-1";
                  changed = true;
                  return _context.abrupt("break", 24);

                case 15:
                  node.layout = "1-1-1-1";
                  changed = true;
                  return _context.abrupt("break", 24);

                case 18:
                  node.layout = "1-1-1-1-1";
                  changed = true;
                  return _context.abrupt("break", 24);

                case 21:
                  node.layout = "1-1-1-1-1-1";
                  changed = true;
                  return _context.abrupt("break", 24);

                case 24:
                  _context.next = 47;
                  break;

                case 26:
                  _context.t1 = node.layout;
                  _context.next = _context.t1 === "1-1" ? 29 : _context.t1 === "1-1-1" ? 35 : _context.t1 === "1-1-1-1" ? 38 : _context.t1 === "1-1-1-1-1" ? 41 : _context.t1 === "1-1-1-1-1-1" ? 44 : 47;
                  break;

                case 29:
                  _context.next = 31;
                  return node.childNodes.forEach(function (el) {
                    // verify its a tag
                    if (el.tagName) {
                      // remove slot name
                      cloneEl = el.cloneNode(true);

                      if (node.getAttribute("slot")) {
                        cloneEl.setAttribute("slot", node.getAttribute("slot"));
                      } else {
                        cloneEl.removeAttribute("slot");
                      }

                      node.parentNode.insertBefore(cloneEl, node);
                    }
                  });

                case 31:
                  // whatever was moved out last use as active now
                  _haxStore.HAXStore.activeNode = cloneEl;
                  setTimeout(function () {
                    node.remove();
                  }, 0);
                  changed = true;
                  return _context.abrupt("break", 47);

                case 35:
                  node.layout = "1-1";
                  changed = true;
                  return _context.abrupt("break", 47);

                case 38:
                  node.layout = "1-1-1";
                  changed = true;
                  return _context.abrupt("break", 47);

                case 41:
                  node.layout = "1-1-1-1";
                  changed = true;
                  return _context.abrupt("break", 47);

                case 44:
                  node.layout = "1-1-1-1-1";
                  changed = true;
                  return _context.abrupt("break", 47);

                case 47:
                  // if left, nudge everything over 1, right simple
                  if (changed) {
                    right = this.contextMenus.plate.shadowRoot.querySelector("#right");
                    rightremove = this.contextMenus.plate.shadowRoot.querySelector("#rightremove");
                    right.disabled = false;
                    rightremove.disabled = false;

                    if (node.layout == "1-1-1-1-1-1") {
                      right.disabled = true;
                    }

                    if (side == "left") {
                      node.childNodes.forEach(function (el) {
                        if (el.tagName) {
                          var s = parseInt(el.getAttribute("slot").replace("col-", ""), 10) + 1;
                          el.setAttribute("slot", "col-".concat(s));
                        }
                      });
                    }
                  }

                  _context.next = 61;
                  break;

                case 50:
                  // make a new grid plate, default to 2 col and disable
                  // responsive by default as this is what many will expect
                  grid = document.createElement("grid-plate");
                  grid.layout = "1-1";
                  grid.disableResponsive = true;

                  if (node.getAttribute("slot")) {
                    grid.setAttribute("slot", node.getAttribute("slot"));
                  }

                  col = "2";

                  if (side == "right") {
                    col = "1";
                  }

                  tmp = node.cloneNode(true);
                  tmp.setAttribute("slot", "col-" + col);
                  grid.appendChild(tmp);
                  node.parentNode.insertBefore(grid, node);
                  setTimeout(function () {
                    node.remove();
                  }, 0);

                case 61:
                  // edge case where we need to force form to update
                  _haxStore.HAXStore.haxTray.refreshActiveNodeForm();

                case 62:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function haxGridPlateOps() {
          return _haxGridPlateOps.apply(this, arguments);
        }

        return haxGridPlateOps;
      }()
      /**
       * Convert an element from one tag to another.
       */

    }, {
      key: "haxReplaceNode",
      value: function haxReplaceNode(node, replacement) {
        // Switch, try loop in case we screwed up elsewhere
        try {
          if (node == null) {
            node = this.__oldActiveNode;
          }

          if (!node.replaceWith && _haxStore.HAXStore._tmpRange) {
            node = _haxStore.HAXStore._tmpRange;
            _haxStore.HAXStore._tmpRange = null;
          }

          node.replaceWith(replacement); // test for slots to match

          if (node && node.getAttribute && node.getAttribute("slot") != null) {
            replacement.setAttribute("slot", node.getAttribute("slot"));
          }
        } catch (e) {
          console.warn(e);
        }

        return replacement;
      }
      /**
       * Convert an element from one tag to another.
       */

    }, {
      key: "haxChangeTagName",
      value: function haxChangeTagName(node, tagName) {
        var maintainContent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        // Create a replacement tag of the desired type
        var replacement = document.createElement(tagName); // Grab all of the original's attributes, and pass them to the replacement

        for (var i = 0, l = node.attributes.length; i < l; ++i) {
          var nodeName = node.attributes.item(i).nodeName;
          var value = node.attributes.item(i).value;

          try {
            replacement.setAttribute(nodeName, value);
          } catch (e) {
            console.warn(node.attributes);
            console.warn(e);
          }
        } // Persist contents
        // account for empty list and ordered list items


        if (maintainContent) {
          replacement.innerHTML = node.innerHTML.trim();
        } else {
          replacement.innerHTML = "<br />";
        }

        if (tagName == "ul" || tagName == "ol") {
          if (replacement.innerHTML == "<br />") {
            replacement.innerHTML = "<li><br /></li>";
          } else if (!(node.tagName.toLowerCase() == "ul" || node.tagName.toLowerCase() == "ol")) {
            replacement.innerHTML = "<li>" + node.innerHTML.trim().replace(/<br\/>/g, "</li>\n<li>").replace(/<br>/g, "</li>\n<li>") + "</li>";
          }
        } else if (node.tagName.toLowerCase() == "ul" || node.tagName.toLowerCase() == "ol") {
          // if we're coming from ul or ol strip out the li tags
          replacement.innerHTML = replacement.innerHTML.replace(/<ul>/g, "").replace(/<\/ul>/g, "").replace(/<li><\/li>/g, "").replace(/<li>/g, "").replace(/<\/li>/g, "<br/>");
        } // Switch!


        try {
          node.replaceWith(replacement);

          if (maintainContent) {
            // focus on the thing switched to
            setTimeout(function () {
              var children = replacement.children; // see if there's a child element and focus that instead if there is

              if (children[0] && children.tagName) {
                children[0].focus();
              } else {
                replacement.focus();
              }
            }, 10);
          }
        } catch (e) {
          console.warn(e);
          console.warn(replacement);
          console.warn(node);
        }

        return replacement;
      }
      /**
       * Delete the node passed in
       */

    }, {
      key: "haxDeleteNode",
      value: function haxDeleteNode(node) {
        if (node.previousElementSibling) {
          _haxStore.HAXStore.activeNode = node.previousElementSibling;
        } else if (node.nextElementSibling) {
          _haxStore.HAXStore.activeNode = node.nextElementSibling;
        } else {
          // implies nothing; let's not allow NOTHING as it breaks user context
          this.haxInsert("p", "", {});

          try {
            var range = document.createRange();

            var sel = _haxStore.HAXStore.getSelection();

            range.setStart(this.activeNode, 0);
            range.collapse(true);
            sel.removeAllRanges();
            sel.addRange(range);
            this.activeNode.focus();
          } catch (e) {
            console.warn(e);
          }
        }

        try {
          return node.remove();
        } catch (e) {
          console.warn(e);
        }
      }
      /**
       * Bulk import HTML with option to clear what is currently
       * in the slot of this tag. This also validates tags
       * that are being inserted for security based on the
       * internal whitelist.
       */

    }, {
      key: "importContent",
      value: function importContent(html) {
        var _this12 = this;

        var clear = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        // kill the slot of the active body, all of it
        if (clear) {
          (0, _utils.wipeSlot)(this, "*");
        }

        setTimeout(function () {
          html = (0, _utils.encapScript)(html);
          var fragment = document.createElement("div");
          fragment.insertAdjacentHTML("beforeend", html);

          while (fragment.firstChild !== null) {
            if (babelHelpers.typeof(fragment.firstChild.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              // ensure import doesn't import non-sandbox safe things!
              if (_haxStore.HAXStore._isSandboxed && fragment.firstChild.tagName.toLowerCase() === "iframe") {
                // Create a replacement tag of the desired type
                var replacement = document.createElement("webview"); // Grab all of the original's attributes, and pass them to the replacement

                for (var j = 0, l = fragment.firstChild.attributes.length; j < l; ++j) {
                  var nodeName = fragment.firstChild.attributes.item(j).nodeName;
                  var value = fragment.firstChild.attributes.item(j).value;

                  if (nodeName === "height" || nodeName === "width") {
                    replacement.style[nodeName] == value;
                  }

                  replacement.setAttribute(nodeName, value);
                }

                _this12.appendChild(replacement);
              } else {
                _this12.appendChild(fragment.firstChild);
              }
            } else {
              // @todo might want to support appending or keeping track of comments / non tags
              // but this is not a must have
              fragment.removeChild(fragment.firstChild);
            }
          }
        }, 0);
      }
      /**
       * Respond to hax operations.
       */

    }, {
      key: "_haxContextOperation",
      value: function _haxContextOperation(e) {
        var detail = e.detail; // support a simple insert event to bubble up or everything else

        switch (detail.eventName) {
          // text based operations for primatives
          case "text-tag":
            // trigger the default selected value in context menu to match
            _haxStore.HAXStore.activeNode = this.haxChangeTagName(this.activeNode, detail.value);
            this.positionContextMenus();
            break;

          case "text-tag-ul":
            // trigger the default selected value in context menu to match
            this.contextMenus.text.realSelectedValue = "ul";
            _haxStore.HAXStore.activeNode = this.haxChangeTagName(this.activeNode, "ul");
            this.positionContextMenus();
            break;

          case "text-tag-ol":
            // trigger the default selected value in context menu to match
            this.contextMenus.text.realSelectedValue = "ol";
            _haxStore.HAXStore.activeNode = this.haxChangeTagName(this.activeNode, "ol");
            this.positionContextMenus();
            break;

          case "text-align-left":
            this.activeNode.style.textAlign = null;
            break;
          // grid plate based operations
          // allow for transforming this haxElement into another one

          case "hax-transform-node":
            this.replaceElementWorkflow();
            break;
          // grid plate based operations
          // allow for transforming this haxElement into another one

          case "hax-plate-create-right":
            this.haxGridPlateOps();
            break;

          case "hax-plate-remove-right":
            this.haxGridPlateOps(false);
            break;
          // duplicate the active item or container

          case "hax-plate-duplicate":
            this.haxDuplicateNode(this.activeNode);
            break;

          case "hax-plate-delete":
            if (this.activeNode != null) {
              this.haxDeleteNode(this.activeNode);
            }

            break;

          case "hax-plate-up":
            this.haxMoveGridPlate("up", this.activeNode);
            break;

          case "hax-plate-down":
            this.haxMoveGridPlate("down", this.activeNode);
            break;
        }
      }
      /**
       * Item has gained focus, change active element to match
       */

    }, {
      key: "_focusIn",
      value: function _focusIn(e) {
        if (!this.__mouseDown) {
          if (this.__focusLogic(e.target)) {
            e.stopPropagation();
            e.stopImmediatePropagation();
          }
        }
      }
      /**
       * Focus a target and update the data model to reflect this.
       * This helps ensure that keyboard and non click based focusing
       * registers the same as click events
       * @param target object - dom node to focus on
       * @param autoFocus boolean - whether to auto focus / place cursor
       */

    }, {
      key: "__focusLogic",
      value: function __focusLogic(target) {
        var _this13 = this;

        var autoFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var stopProp = false; // only worry about these when we are in edit mode
        // and there is no drawer open

        if (this.editMode && !this.__tabTrap) {
          var containerNode = target; // edge case, thing selected is inside a paragraph tag
          // HTML is stupid and allows this

          if (containerNode.tagName === "SPAN" && _haxStore.HAXStore.isTextElement(containerNode.parentNode) && containerNode.parentNode.getAttribute("slot") == "") {
            containerNode = target.parentNode;
          }

          var activeNode = null; // ensure this is valid

          if (this._validElementTest(containerNode) && containerNode.parentNode && containerNode.parentNode.tagName) {
            // keep looking til we are juuuust below the container
            // @notice this is where we force a selection on highest level
            // of the document unless we have a special common case
            // where we have a valid element yet the parent is a paragraph
            if (containerNode.parentNode.tagName === "P" && containerNode.parentNode.getAttribute("slot") == "") {
              activeNode = containerNode;
              stopProp = true;
            } else {
              while (containerNode.parentNode && containerNode.parentNode.tagName && containerNode.parentNode.tagName != "HAX-BODY") {
                // make sure active is set after closest legit element
                if (activeNode === null && containerNode.tagName !== "B" && containerNode.tagName !== "I" && containerNode.tagName !== "STRONG" && containerNode.tagName !== "EM") {
                  activeNode = containerNode;
                }

                containerNode = containerNode.parentNode;
              } // case with simple element


              if (activeNode === null) {
                activeNode = containerNode;
              } // we only allow disconnected node from container when
              // the container is a grid plate
              else if (!_haxStore.HAXStore.isGridPlateElement(containerNode)) {
                  activeNode = containerNode;
                }
            } // ensure this is a tag we care about / have support for and
            // that it is a new value


            if (this.activeNode && this.activeNode.parentNode !== containerNode && !containerNode.classList.contains("ignore-activation")) {
              stopProp = true;
            } else if (containerNode.classList.contains("ignore-activation")) {
              stopProp = true;
            } // test for ignore edge case


            if (!activeNode.classList.contains("ignore-activation")) {
              _haxStore.HAXStore.activeNode = activeNode;
              setTimeout(function () {
                if (autoFocus && !_this13.__mouseDown && _haxStore.HAXStore.isTextElement(activeNode)) {
                  try {
                    var range = document.createRange();

                    var sel = _haxStore.HAXStore.getSelection();

                    range.setStart(_this13.activeNode, 0);
                    range.collapse(true);
                    sel.removeAllRanges();
                    sel.addRange(range);

                    _this13.activeNode.focus();
                  } catch (e) {
                    console.warn(e);
                  }
                }

                _this13.positionContextMenus(activeNode);
              }, 0);
              stopProp = true;
            }
          }
        } else {
          this.__tabTrap = false;
        }

        return stopProp;
      }
      /**
       * Simple utility to do nice scrolling or only scroll if we can't see it
       * as that is better behavior but not in all browsers
       */

    }, {
      key: "scrollHere",
      value: function scrollHere(node) {
        // scroll to it w/ timing delay as this uses resources
        // and we want to ensure it's in the next micro-task
        setTimeout(function () {
          if (typeof node.scrollIntoViewIfNeeded === "function") {
            node.scrollIntoViewIfNeeded(true);
          } else {
            node.scrollIntoView({
              behavior: "smooth",
              inline: "center"
            });
          }
        }, 0);
      }
    }, {
      key: "undo",
      value: function undo() {
        var _this14 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(HaxBody.prototype), "undo", this).call(this);
        setTimeout(function () {
          var active = _this14.querySelector(".hax-active");

          if (active) {
            _this14.__focusLogic(active);

            _this14.scrollHere(active);
          } else {
            _this14.hideContextMenus();
          }
        }, 0);
      }
    }, {
      key: "redo",
      value: function redo() {
        var _this15 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(HaxBody.prototype), "redo", this).call(this);
        setTimeout(function () {
          var active = _this15.querySelector(".hax-active");

          if (active) {
            _this15.__focusLogic(active);

            _this15.scrollHere(active);
          } else {
            _this15.hideContextMenus();
          }
        }, 0);
      }
      /**
       * Notice the change between states for editing.
       */

    }, {
      key: "_editModeChanged",
      value: function _editModeChanged(newValue, oldValue) {
        var _this16 = this;

        // fire above that we have changed states so things can react if needed
        if (babelHelpers.typeof(oldValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this._applyContentEditable(newValue);

          if (newValue) {
            // minor timeout here to see if we have children or not. the slight delay helps w/
            // timing in scenarios where this is inside of other systems which are setting default
            // attributes and what not
            if (this.children && this.children[0] && this.children[0].focus) {
              this.__focusLogic(this.children[0]);
            } else {
              this.haxInsert("p", "", {});

              try {
                var range = document.createRange();

                var sel = _haxStore.HAXStore.getSelection();

                range.setStart(this.activeNode, 0);
                range.collapse(true);
                sel.removeAllRanges();
                sel.addRange(range);
                this.activeNode.focus();
              } catch (e) {
                console.warn(e);
              }
            }
          } // force a reset when we start editing
          // the delay gives HAX / HAX endpoints some room to manipulate the DOM first


          setTimeout(function () {
            _this16.undoStack.undoStackLimit = 50;
            _this16.undoStack.undoStackPosition = -1;
            _this16.undoStack.commands = []; // execute once just to get these values

            _this16.undoStack.changed(); // reset initial value to avoid some state management issues


            _this16.undoStackInitialValue = _this16.innerHTML;
            _this16.undoStackPrevValue = _this16.undoStackInitialValue;
          }, 0);
        } // hide menus when state changes


        if (newValue == false) {
          this.removeAttribute("contenteditable");
          this.hideContextMenus(); // clean up for nested items we might miss

          this.querySelectorAll("[contenteditable],.hax-active").forEach(function (el) {
            el.removeAttribute("contenteditable");
            el.classList.remove("hax-active");
          });
        }
      }
      /**
       * Test if this is a HAX element or not
       */

    }, {
      key: "_haxResolvePreviousElement",
      value: function _haxResolvePreviousElement(node) {
        node = node.previousElementSibling;

        while (node != null && babelHelpers.typeof(node.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && node.tagName.substring(0, 4) === "HAX-") {
          node = node.previousElementSibling;
        }

        return node;
      }
      /**
       * Test if this is a HAX element or not
       * true means its a valid element for selection
       * We have special support for the hax-logo because it's hax.
       */

    }, {
      key: "_validElementTest",
      value: function _validElementTest(node) {
        // ignore hax internal tags
        // search results can be drag'ed from their panel for exact placement
        // special place holder in drag and drop
        if (node.tagName && !["TEMPLATE", "HAX-BODY", "HAX-APP-SEARCH-RESULT", "FAKE-HAX-BODY-END"].includes(node.tagName)) {
          // special case of SPAN as it can often get embedded places without actually
          // being the thing that should grad actual block level focus
          // this would be like a B or I tag grabbing focus as well
          if (this._HTMLInlineTextDecorationTest(node) && node.parentNode != "HAX-BODY") {
            return false;
          }

          return true;
        }

        return false;
      }
      /**
       * test for inline tags
       */

    }, {
      key: "_HTMLInlineTextDecorationTest",
      value: function _HTMLInlineTextDecorationTest(node) {
        return ["span", "b", "strong", "i", "em"].includes(node.tagName.toLowerCase());
      }
      /**
       * Test if this is an HTML primative
       */

    }, {
      key: "_HTMLPrimativeTest",
      value: function _HTMLPrimativeTest(node) {
        if (node != null && babelHelpers.typeof(node.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && node.tagName.indexOf("-") == -1) {
          return true;
        }

        return false;
      }
      /**
       * Walk everything we find and either enable or disable editable state.
       */

    }, {
      key: "_applyContentEditable",
      value: function _applyContentEditable(status) {
        var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.shadowRoot.querySelector("#body");
        var children = target.localName === "slot" ? target.assignedNodes({
          flatten: true
        }) : []; // fallback for content nodes if not polymer managed nodes above

        if (children.length === 0) {
          children = target.children;
        }

        for (var i = 0, len = children.length; i < len; i++) {
          // sanity check for being a valid element / not a "hax" element
          if (this._validElementTest(children[i])) {
            // correctly add or remove listeners
            if (!status || children[i].getAttribute("contenteditable") !== true && children[i].getAttribute("contenteditable") != "true" && children[i].getAttribute("contenteditable") != "contenteditable") {
              this.__applyNodeEditableState(children[i], status);
            }
          }
        }
      }
      /**
       * Apply the node editable state correctly so we can do drag and drop / editing uniformly
       */

    }, {
      key: "__applyNodeEditableState",
      value: function __applyNodeEditableState(node) {
        var _this17 = this;

        var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var listenerMethod; // create the hax-ray x ray googles thing

        var haxRay = node.tagName.replace("-", " ").toLowerCase();

        var i = _haxStore.HAXStore.gizmoList.findIndex(function (j) {
          if (j) {
            return j.tag === node.tagName.toLowerCase();
          }
        });

        if (i !== -1) {
          haxRay = _haxStore.HAXStore.gizmoList[i].title;
        } // oooooo snap, drag and drop..


        if (status) {
          node.setAttribute("data-hax-ray", haxRay);
          listenerMethod = "addEventListener";
        } else {
          node.removeAttribute("data-hax-ray");
          listenerMethod = "removeEventListener";
        }

        node[listenerMethod]("drop", this.dropEvent.bind(this));
        node[listenerMethod]("dragenter", this.dragEnter.bind(this));
        node[listenerMethod]("dragleave", this.dragLeave.bind(this));
        node[listenerMethod]("dragover", function (e) {
          _this17.__dragMoving = true;
          e.preventDefault();
        }); // additional things for text based elements

        if (this._HTMLPrimativeTest(node)) {
          if (status) {
            node.setAttribute("contenteditable", status);
          } else {
            node.removeAttribute("contenteditable");
          }

          if (node.querySelectorAll("a").length > 0) {
            var links = node.querySelectorAll("a");

            for (var j = 0, len2 = links.length; j < len2; j++) {
              if (status) {
                links[j].setAttribute("contenteditable", status);
              } else {
                links[j].removeAttribute("contenteditable");
              }

              links[j][listenerMethod]("click", function (e) {
                e.preventDefault();
                e.stopPropagation();
                e.stopImmediatePropagation();
              });
            }
          }
        }
      }
      /**
       * Refine the stack logic so that visual class markers
       * do not bleed over into state changes
       */

    }, {
      key: "undoManagerStackLogic",
      value: function undoManagerStackLogic(mutations) {
        if (!this.__dragMoving) {
          this.querySelectorAll(".hax-hovered").forEach(function (el) {
            el.classList.remove("hax-hovered");
          });
          babelHelpers.get(babelHelpers.getPrototypeOf(HaxBody.prototype), "undoManagerStackLogic", this).call(this, mutations);
        }
      }
      /**
       * Drop an item onto another
       */

    }, {
      key: "dropEvent",
      value: function dropEvent(e) {
        if (this.editMode) {
          this.__dragMoving = false; // make sure that IF we had mutations they don't fire till AFTER
          // this prevents issues where the mutation record was combined
          // and then blocked because of being moved

          this.undoManagerStackLogic({}); // esnure we clear the gravity scrolling drag effect

          clearTimeout(gravityScrollTimer);
          _haxStore.HAXStore._lockContextPosition = false; // trick the tray into forcing active to be Configure

          _haxStore.HAXStore.haxTray.activeTab = "item-1";
          var target = null;

          if (e.target.closest("grid-plate") && e.target.parentNode != e.target.closest("grid-plate")) {
            target = e.target.closest("grid-plate");
          } else if (e.target.closest("[contenteditable],img")) {
            target = e.target.closest("[contenteditable],img");
          } else if (e.originalTarget) {
            target = e.originalTarget;
          } else {
            target = e.target;
          } // account for slot drop on a place holder


          if (e.path[0].classList.contains("column")) {
            this.__slot = e.path[0].getAttribute("id").replace("col", "col-");
          } else if (target.getAttribute("slot")) {
            this.__slot = target.getAttribute("slot");
          } // establish an activeNode /container based on drop poisition


          _haxStore.HAXStore.activeNode = target; // walk the children and remove the draggable state needed

          this.querySelectorAll(".hax-hovered").forEach(function (el) {
            el.classList.remove("hax-hovered");
          }); // remove grid-plate drops

          this.querySelectorAll(".active").forEach(function (el) {
            el.classList.remove("active");
          }); // var for the local drop target

          var local; // this helps ensure that what gets drag and dropped is a file
          // this prevents issues with selecting and dragging text (which triggers drag/drop)
          // as well as compatibility with things that are legit in a draggable state

          try {
            // see if we are dropping a file
            if (e.dataTransfer && e.dataTransfer.items && e.dataTransfer.items.length > 0 && e.dataTransfer.items[0].kind === "file") {
              e.preventDefault();
              e.stopPropagation();
              e.stopImmediatePropagation(); // inject a placeholder P tag which we will then immediately replace

              var tmp = document.createElement("p");

              if (e.target.closest("grid-plate") && e.target.parentNode != e.target.closest("grid-plate")) {
                local = e.target.closest("grid-plate");
              } else if (e.target.closest("[contenteditable],img")) {
                local = e.target.closest("[contenteditable],img");
              }

              if (local && local.tagName && !["GRID-PLATE", "HAX-BODY"].includes(local.tagName) || e.path[0].tagName === "GRID-PLATE") {
                if (local.getAttribute("slot")) {
                  tmp.setAttribute("slot", local.getAttribute("slot"));
                } else if (e.path[0].classList.contains("column")) {
                  tmp.setAttribute("slot", e.path[0].getAttribute("id").replace("col", "col-"));
                } else {
                  tmp.removeAttribute("slot");
                }

                local.parentNode.insertBefore(tmp, local);
              } else {
                if (e.path[0].classList.contains("column")) {
                  tmp.setAttribute("slot", e.path[0].getAttribute("id").replace("col", "col-"));
                } // account for drop target of main body yet still having a slot attr
                else if (local && local.tagName === "HAX-BODY" && tmp.getAttribute("slot")) {
                    tmp.removeAttribute("slot");
                  }

                if (local) {
                  local.appendChild(tmp);
                } else {
                  this.appendChild(tmp);
                }
              } // this placeholder will be immediately replaced


              e.placeHolderElement = tmp; // fire this specialized event up so things like HAX can intercept

              this.dispatchEvent(new CustomEvent("place-holder-file-drop", {
                bubbles: true,
                cancelable: true,
                composed: true,
                detail: e
              }));
            } else {
              // set taget based on drag target
              target = _haxStore.HAXStore.__dragTarget;
              local = e.target;

              if (e.target.closest("grid-plate") && e.target.parentNode != e.target.closest("grid-plate")) {
                local = e.target.closest("grid-plate");
              } else if (e.target.closest("[contenteditable],img")) {
                local = e.target.closest("[contenteditable],img");
              } // if we have a slot on what we dropped into then we need to mirror that item
              // and place ourselves below it in the DOM


              if (local && target && this._validElementTest(target) && target !== local) {
                // incase this came from a grid plate, drop the slot so it works
                try {
                  if (!["GRID-PLATE", "HAX-BODY"].includes(local.tagName) || e.path[0].tagName === "GRID-PLATE") {
                    if (local.getAttribute("slot")) {
                      target.setAttribute("slot", local.getAttribute("slot"));
                    } else if (e.path[0].classList.contains("column")) {
                      target.setAttribute("slot", e.path[0].getAttribute("id").replace("col", "col-"));
                    } else {
                      target.removeAttribute("slot");
                    }

                    local.parentNode.insertBefore(target, local);
                  } else {
                    if (e.path[0].classList.contains("column")) {
                      target.setAttribute("slot", e.path[0].getAttribute("id").replace("col", "col-"));
                    } // account for drop target of main body yet still having a slot attr
                    else if (local.tagName === "HAX-BODY" && target.getAttribute("slot")) {
                        target.removeAttribute("slot");
                      }

                    local.appendChild(target);
                  }
                } catch (e) {
                  console.warn(e);
                } // ensure that if we caught this event we process it


                e.preventDefault();
                e.stopPropagation();
              } // position arrows / set focus in case the DOM got updated above


              if (target && this._validElementTest(target) && typeof target.focus === "function") {
                _haxStore.HAXStore.activeNode = target; // fire event saying that we dropped an item and gained
                // focus which should prioritize certain actions over a
                // normal focus shift

                this.dispatchEvent(new CustomEvent("hax-drop-focus-event", {
                  bubbles: true,
                  cancelable: true,
                  composed: true,
                  detail: this.activeNode
                }));
                this.scrollHere(this.activeNode);
                this.positionContextMenus();
              }
            }
          } catch (e) {
            console.warn(e);
          }
        } // reset this after the drop happens


        _haxStore.HAXStore.__dragTarget = null;

        this.__manageFakeEndCap(false);
      }
      /**
       * Enter an element, meaning we've over it while dragging
       */

    }, {
      key: "dragEnter",
      value: function dragEnter(e) {
        if (this.editMode && e.target) {
          this.__dragMoving = true;
          e.preventDefault();

          if (e.target && e.target.classList) {
            e.target.classList.add("hax-hovered");
          } // perform check for edge of screen


          this.handleMousemove(e);
        }
      } // refactored from https://github.com/bennadel/JavaScript-Demos/blob/master/demos/window-edge-scrolling/index.htm
      // I adjust the window scrolling in response to the given mousemove event.

    }, {
      key: "handleMousemove",
      value: function handleMousemove(e) {
        // NOTE: Much of the information here, with regard to document dimensions,
        // viewport dimensions, and window scrolling is derived from JavaScript.info.
        // I am consuming it here primarily as NOTE TO SELF.
        // --
        // Read More: https://javascript.info/size-and-scroll-window
        // --
        // CAUTION: The viewport and document dimensions can all be CACHED and then
        // recalculated on window-resize events (for the most part). I am keeping it
        // all here in the mousemove event handler to remove as many of the moving
        // parts as possible and keep the demo as simple as possible.
        // Get the viewport-relative coordinates of the mousemove event.
        var viewportX = e.clientX;
        var viewportY = e.clientY; // Get the viewport dimensions.

        var viewportWidth = document.documentElement.clientWidth;
        var viewportHeight = document.documentElement.clientHeight; // Next, we need to determine if the mouse is within the "edge" of the
        // viewport, which may require scrolling the window. To do this, we need to
        // calculate the boundaries of the edge in the viewport (these coordinates
        // are relative to the viewport grid system).

        var edgeTop = edgeSize;
        var edgeLeft = edgeSize;
        var edgeBottom = viewportHeight - edgeSize;
        var edgeRight = viewportWidth - edgeSize;
        var isInLeftEdge = viewportX < edgeLeft;
        var isInRightEdge = viewportX > edgeRight;
        var isInTopEdge = viewportY < edgeTop;
        var isInBottomEdge = viewportY > edgeBottom; // If the mouse is not in the viewport edge, there's no need to calculate
        // anything else.

        if (!(isInLeftEdge || isInRightEdge || isInTopEdge || isInBottomEdge)) {
          clearTimeout(gravityScrollTimer);
          return;
        } // If we made it this far, the user's mouse is located within the edge of the
        // viewport. As such, we need to check to see if scrolling needs to be done.
        // Get the document dimensions.
        // --
        // NOTE: The various property reads here are for cross-browser compatibility
        // as outlined in the JavaScript.info site (link provided above).


        var documentWidth = Math.max(document.body.scrollWidth, document.body.offsetWidth, document.body.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth, document.documentElement.clientWidth);
        var documentHeight = Math.max(document.body.scrollHeight, document.body.offsetHeight, document.body.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight, document.documentElement.clientHeight); // Calculate the maximum scroll offset in each direction. Since you can only
        // scroll the overflow portion of the document, the maximum represents the
        // length of the document that is NOT in the viewport.

        var maxScrollX = documentWidth - viewportWidth;
        var maxScrollY = documentHeight - viewportHeight; // As we examine the mousemove event, we want to adjust the window scroll in
        // immediate response to the event; but, we also want to continue adjusting
        // the window scroll if the user rests their mouse in the edge boundary. To
        // do this, we'll invoke the adjustment logic immediately. Then, we'll setup
        // a timer that continues to invoke the adjustment logic while the window can
        // still be scrolled in a particular direction.
        // --
        // NOTE: There are probably better ways to handle the ongoing animation
        // check. But, the point of this demo is really about the math logic, not so
        // much about the interval logic.

        (function checkForWindowScroll() {
          clearTimeout(gravityScrollTimer);

          if (adjustWindowScroll()) {
            gravityScrollTimer = setTimeout(checkForWindowScroll, 30);
          }
        })(); // Adjust the window scroll based on the user's mouse position. Returns True
        // or False depending on whether or not the window scroll was changed.


        function adjustWindowScroll() {
          // Get the current scroll position of the document.
          var currentScrollX = window.pageXOffset;
          var currentScrollY = window.pageYOffset; // Determine if the window can be scrolled in any particular direction.

          var canScrollUp = currentScrollY > 0;
          var canScrollDown = currentScrollY < maxScrollY;
          var canScrollLeft = currentScrollX > 0;
          var canScrollRight = currentScrollX < maxScrollX; // Since we can potentially scroll in two directions at the same time,
          // let's keep track of the next scroll, starting with the current scroll.
          // Each of these values can then be adjusted independently in the logic
          // below.

          var nextScrollX = currentScrollX;
          var nextScrollY = currentScrollY; // As we examine the mouse position within the edge, we want to make the
          // incremental scroll changes more "intense" the closer that the user
          // gets the viewport edge. As such, we'll calculate the percentage that
          // the user has made it "through the edge" when calculating the delta.
          // Then, that use that percentage to back-off from the "max" step value.
          // Should we scroll left?

          if (isInLeftEdge && canScrollLeft) {
            var intensity = (edgeLeft - viewportX) / edgeSize;
            nextScrollX = nextScrollX - maxStep * intensity; // Should we scroll right?
          } else if (isInRightEdge && canScrollRight) {
            var intensity = (viewportX - edgeRight) / edgeSize;
            nextScrollX = nextScrollX + maxStep * intensity;
          } // Should we scroll up?


          if (isInTopEdge && canScrollUp) {
            var intensity = (edgeTop - viewportY) / edgeSize;
            nextScrollY = nextScrollY - maxStep * intensity; // Should we scroll down?
          } else if (isInBottomEdge && canScrollDown) {
            var intensity = (viewportY - edgeBottom) / edgeSize;
            nextScrollY = nextScrollY + maxStep * intensity;
          } // Sanitize invalid maximums. An invalid scroll offset won't break the
          // subsequent .scrollTo() call; however, it will make it harder to
          // determine if the .scrollTo() method should have been called in the
          // first place.


          nextScrollX = Math.max(0, Math.min(maxScrollX, nextScrollX));
          nextScrollY = Math.max(0, Math.min(maxScrollY, nextScrollY));

          if (nextScrollX !== currentScrollX || nextScrollY !== currentScrollY) {
            window.scrollTo(nextScrollX, nextScrollY);
            return true;
          } else {
            return false;
          }
        }
      }
      /**
       * Leaving an element while dragging.
       */

    }, {
      key: "dragLeave",
      value: function dragLeave(e) {
        if (this.editMode && e.target && e.target.classList) {
          this.__dragMoving = true;
          e.target.classList.remove("hax-hovered");
        }
      }
      /**
       * React to a new node being set to active.
       */

    }, {
      key: "_activeNodeChanged",
      value: function () {
        var _activeNodeChanged2 = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(newValue, oldValue) {
          var tag;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return this.querySelectorAll(".hax-active").forEach(function (el) {
                    el.classList.remove("hax-active");
                  });

                case 2:
                  if (this.editMode && babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && newValue !== null && newValue.parentNode) {
                    tag = newValue.tagName.toLowerCase(); // remove the menu, establish the new active, then reapply
                    // this is nessecary because the context menu gets appended into
                    // the document
                    // only hide if we change containers

                    newValue.classList.add("hax-active");

                    if (_haxStore.HAXStore.isTextElement(newValue) || newValue.tagName === "HR" || _haxStore.HAXStore.isGridPlateElement(newValue)) {
                      newValue.setAttribute("contenteditable", true);
                      this.setAttribute("contenteditable", true);
                    } else {
                      newValue.removeAttribute("contenteditable");
                      this.removeAttribute("contenteditable");
                    } // why you no position yo?


                    this._keepContextVisible();

                    this.contextMenus.text.realSelectedValue = tag;
                  } // just hide menus if we don't have an active item
                  else if (newValue === null) {
                      this.hideContextMenus();
                      this.__oldActiveNode = oldValue;
                    }

                case 3:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function _activeNodeChanged(_x, _x2) {
          return _activeNodeChanged2.apply(this, arguments);
        }

        return _activeNodeChanged;
      }()
      /**
       * Get position from top and left of the page based on position:relative; being
       * set in a parent.
       *
       * @notice This only works correctly across browsers because hax-body
       * is position:relative in :host.
       */

    }, {
      key: "_getPosition",
      value: function _getPosition(element) {
        var xPosition = element.offsetLeft - element.scrollLeft + element.clientLeft;
        var yPosition = element.offsetTop - element.scrollTop + element.clientTop;
        return {
          x: xPosition,
          y: yPosition
        };
      }
      /**
       * Handle display and position of the context menu
       */

    }, {
      key: "_positionContextMenu",
      value: function _positionContextMenu(menu, target, xoffset, yoffset) {
        // make it account for the offset if it's floated over to one side
        // or inside of something that's over that way
        if (target != null) {
          var pos = this._getPosition(target);

          if (xoffset != null) {
            menu.style["left"] = pos.x + xoffset + "px";
          } else {
            menu.style["left"] = pos.x + "px";
          }

          if (yoffset != null) {
            menu.style["top"] = pos.y + yoffset + "px";
          } else {
            menu.style["top"] = pos.y + "px";
          }
        }

        menu.setAttribute("on-screen", "on-screen");
        menu.classList.add("hax-context-visible", "hax-context-menu-active");
      }
      /**
       * Simple hide / reset of whatever menu it's handed.
       */

    }, {
      key: "_hideContextMenu",
      value: function _hideContextMenu(menu) {
        menu.removeAttribute("on-screen");
        menu.visible = false;
        menu.classList.remove("hax-context-visible", "hax-context-pin-top", "hax-context-menu-active");
      }
      /**
       * Find the next thing to tab forward to.
       */

    }, {
      key: "_tabKeyPressed",
      value: function _tabKeyPressed() {
        // try selection / tab block since range can cause issues
        if (this.activeNode && _haxStore.HAXStore.getRange().cloneRange) {
          try {
            var focus = false;
            var node = this.activeNode.parentNode;
            var activeNodeTagName = this.activeNode.parentNode.tagName;

            var range = _haxStore.HAXStore.getRange().cloneRange();

            var tagTest = range.commonAncestorContainer.tagName;

            if (babelHelpers.typeof(tagTest) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              tagTest = range.commonAncestorContainer.parentNode.tagName;
            }

            if (["UL", "OL", "LI"].includes(activeNodeTagName) || ["UL", "OL", "LI"].includes(tagTest)) {
              if (this.polyfillSafe) {
                this.__tabTrap = true;
                this.__indentTrap = true;
                document.execCommand("indent");
              }
            } else {
              while (!focus) {
                // do nothing
                if (node.nextSibling == null) {
                  focus = true;
                } else if (node.nextSibling.focus === "function") {
                  node.nextSibling.focus();
                  focus = true;
                } else {
                  node = node.nextSibling;
                }
              }
            }
          } catch (e) {
            console.warn(e);
          }
        }
      }
      /**
       * Move back through things when tab back pressed
       */

    }, {
      key: "_tabBackKeyPressed",
      value: function _tabBackKeyPressed() {
        // try selection / tab block since range can cause issues
        if (this.activeNode && _haxStore.HAXStore.getRange().cloneRange) {
          try {
            var node = this.activeNode.parentNode;
            var activeNodeTagName = this.activeNode.parentNode.tagName;

            var range = _haxStore.HAXStore.getRange().cloneRange();

            var tagTest = range.commonAncestorContainer.tagName;

            if (babelHelpers.typeof(tagTest) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              tagTest = range.commonAncestorContainer.parentNode.tagName;
            }

            if (["UL", "OL", "LI"].includes(activeNodeTagName) || ["UL", "OL", "LI"].includes(tagTest)) {
              if (this.polyfillSafe) {
                this.__tabTrap = true;
                this.__indentTrap = true;
                document.execCommand("outdent");
              }
            } else {
              if (node != null) {
                // step back ignoring hax- prefixed elements
                while (node != null && !this._validElementTest(node)) {
                  node = node.previousSibling;
                }
              }

              if (node != null) {
                setTimeout(function () {
                  node.focus();
                }, 50);
              }
            }
          } catch (e) {
            console.warn(e);
          }
        }
      }
    }], [{
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HaxBody), "properties", this)), {}, {
          haxMover: {
            type: Boolean,
            attribute: "hax-mover",
            reflect: true
          },

          /**
           * State of if we are editing or not.
           */
          editMode: {
            type: Boolean,
            reflect: true,
            attribute: "edit-mode"
          },

          /**
           * Bust out the HAX Ray mode
           */
          haxRayMode: {
            type: Boolean,
            reflect: true,
            attribute: "hax-ray-mode"
          },

          /**
           * Access to the global properties object.
           */
          globalPreferences: {
            type: Object
          },

          /**
           * A reference to the active node in the slot.
           */
          activeNode: {
            type: Object
          }
        });
      }
    }]);
    return HaxBody;
  }((0, _undoManager.UndoManagerBehaviors)(_simpleColors.SimpleColors));

  _exports.HaxBody = HaxBody;
  window.customElements.define(HaxBody.tag, HaxBody);
});