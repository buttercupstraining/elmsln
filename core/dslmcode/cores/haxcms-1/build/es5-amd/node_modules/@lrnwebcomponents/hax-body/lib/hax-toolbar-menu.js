define(["exports", "../../../lit-element/lit-element.js", "../../simple-icon/simple-icon.js", "./hax-toolbar-item.js", "../../simple-popover/lib/simple-popover-selection.js"], function (_exports, _litElement, _simpleIcon, _haxToolbarItem, _simplePopoverSelection) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxToolbarMenu = void 0;

  function _templateObject2_bde02ba0291111ebb1faf5089ca89c05() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          box-sizing: border-box;\n        }\n        simple-icon {\n          --simple-icon-height: 10px;\n          --simple-icon-width: 10px;\n        }\n        .flip-icon {\n          transform: rotateY(180deg);\n        }\n      "]);

    _templateObject2_bde02ba0291111ebb1faf5089ca89c05 = function _templateObject2_bde02ba0291111ebb1faf5089ca89c05() {
      return data;
    };

    return data;
  }

  function _templateObject_bde02ba0291111ebb1faf5089ca89c05() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <simple-popover-selection\n        @simple-popover-selection-changed=\"", "\"\n        auto\n        orientation=\"tb\"\n      >\n        <style slot=\"style\">\n          simple-popover-manager hax-context-item {\n            overflow: hidden;\n            display: flex;\n          }\n          simple-popover-manager {\n            --simple-popover-padding: 0;\n          }\n        </style>\n        <hax-toolbar-item\n          ?mini=\"", "\"\n          ?action=\"", "\"\n          slot=\"button\"\n          icon=\"", "\"\n          .hidden=\"", "\"\n          .class=\"", "\"\n          tooltip=\"", "\"\n        >\n          <simple-icon dark icon=\"hax:expand-more\"></simple-icon>\n        </hax-toolbar-item>\n        <div slot=\"options\">\n          <slot></slot>\n        </div>\n      </simple-popover-selection>\n    "]);

    _templateObject_bde02ba0291111ebb1faf5089ca89c05 = function _templateObject_bde02ba0291111ebb1faf5089ca89c05() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  var HaxToolbarMenu = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(HaxToolbarMenu, _LitElement);

    var _super = _createSuper(HaxToolbarMenu);

    babelHelpers.createClass(HaxToolbarMenu, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_bde02ba0291111ebb1faf5089ca89c05(), this.selectedChanged, this.mini, this.action, this.icon, !this.icon, this.iconClass, this.tooltip);
      }
    }, {
      key: "selectedChanged",
      value: function selectedChanged(e) {
        this.shadowRoot.querySelector("simple-popover-selection").opened = false;
        this.selected = e.detail.value;
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_bde02ba0291111ebb1faf5089ca89c05())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-toolbar-menu";
      }
    }]);

    function HaxToolbarMenu() {
      var _this;

      babelHelpers.classCallCheck(this, HaxToolbarMenu);
      _this = _super.call(this);
      _this.corner = "";
      _this.action = false;
      _this.tooltip = "";
      _this.tooltipDirection = "";
      _this.selected = 0;
      setTimeout(function () {
        _this.addEventListener("click", _this._menubuttonTap.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);
      return _this;
    }

    babelHelpers.createClass(HaxToolbarMenu, [{
      key: "updated",

      /**
       * property changed callback
       */
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "selected") {
            // fire an event that this is a core piece of the system
            _this2.dispatchEvent(new CustomEvent("selected-changed", {
              detail: _this2[propName]
            }));
          }
        });
      }
      /**
       * Ensure menu is visible / default'ed.
       */

    }, {
      key: "_menubuttonTap",
      value: function _menubuttonTap(e) {
        this.selected = "";
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          /**
           * corner
           */
          corner: {
            type: String,
            reflect: true
          },
          mini: {
            type: Boolean,
            reflect: true
          },
          action: {
            type: Boolean
          },
          icon: {
            type: String
          },
          tooltip: {
            type: String
          },
          tooltipDirection: {
            type: String,
            attribute: "tooltip-direction"
          },
          selected: {
            type: Number
          }
        };
      }
    }]);
    return HaxToolbarMenu;
  }(_litElement.LitElement);

  _exports.HaxToolbarMenu = HaxToolbarMenu;
  window.customElements.define(HaxToolbarMenu.tag, HaxToolbarMenu);
});